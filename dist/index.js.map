{"version":3,"sources":["../src/services/ApeChainRelayService.ts","../src/services/TransactionStatusService.ts","../src/services/BalanceWatcherService.ts","../src/services/RelayStatusService.ts","../src/core/ApeChainTippingSDK.ts","../src/index.ts"],"names":["ABI","getContract","SUPPORTED_CHAINS","readContract","chain"],"mappings":"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","file":"index.js","sourcesContent":["// packages/sdk/src/services/ApeChainRelayService.ts\nimport { SUPPORTED_CHAINS, CONTRACT_CONSTANTS } from '@tippingchain/contracts-interface';\n\nexport interface RelayQuote {\n  id: string;\n  fromChainId: number;\n  toChainId: number;\n  fromToken: string;\n  toToken: string | null;\n  amount: string;\n  estimatedOutput: string;\n  fees: string;\n  estimatedTime: number; // in seconds\n  route?: unknown; // Optional route information\n}\n\nexport interface RelayResult {\n  success: boolean;\n  relayId?: string;\n  destinationChain: number;\n  estimatedUsdcAmount?: string;\n  error?: string;\n}\n\nexport interface QuoteRequestParams {\n  fromChainId: number;\n  fromToken: string;\n  toChainId: number;\n  toToken: string;\n  amount: string;\n}\n\nexport class ApeChainRelayService {\n  private readonly APECHAIN_ID = SUPPORTED_CHAINS.APECHAIN;\n  private readonly USDC_TOKEN_ADDRESS = CONTRACT_CONSTANTS.APECHAIN_USDC;\n  private readonly baseUrl: string = 'https://api.relay.link';\n\n  /**\n   * Get a quote for relaying tokens to ApeChain (for estimation purposes)\n   * Note: The actual relay is now handled by the integrated contract\n   */\n  async getQuote(params: QuoteRequestParams): Promise<RelayQuote> {\n    try {\n      const response = await this.makeRequest('POST', '/quote', {\n        originChainId: params.fromChainId,\n        destinationChainId: params.toChainId,\n        originCurrency: params.fromToken === 'native' ? '0x0000000000000000000000000000000000000000' : params.fromToken,\n        destinationCurrency: params.toToken,\n        amount: params.amount,\n      });\n\n      return {\n        id: (response as any).id || '',\n        fromChainId: params.fromChainId,\n        toChainId: params.toChainId,\n        fromToken: params.fromToken,\n        toToken: params.toToken,\n        amount: params.amount,\n        estimatedOutput: (response as any).destinationAmount || '0',\n        fees: (response as any).fees || '0',\n        estimatedTime: (response as any).estimatedTime || 300, // 5 minutes default\n        route: (response as any).route,\n      };\n    } catch (error) {\n      throw new Error(`Failed to get relay quote: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Estimate USDC output for a tip (deprecated - contracts handle relay automatically)\n   * @deprecated Use getQuote directly instead\n   */\n  async relayTipToApeChain(params: {\n    fromChainId: number;\n    fromToken: string;\n    amount: string;\n    creatorAddress: string;\n    targetToken?: string;\n  }): Promise<RelayResult> {\n    try {\n      const quote = await this.getQuote({\n        fromChainId: params.fromChainId,\n        fromToken: params.fromToken,\n        toChainId: this.APECHAIN_ID,\n        toToken: this.USDC_TOKEN_ADDRESS,\n        amount: params.amount,\n      });\n\n      return {\n        success: true,\n        relayId: quote.id,\n        destinationChain: this.APECHAIN_ID,\n        estimatedUsdcAmount: quote.estimatedOutput,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        destinationChain: this.APECHAIN_ID,\n      };\n    }\n  }\n\n  private async makeRequest(method: string, endpoint: string, data?: unknown): Promise<unknown> {\n    try {\n      const url = `${this.baseUrl}${endpoint}`;\n      const options: RequestInit = {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      };\n\n      if (data && (method === 'POST' || method === 'PUT')) {\n        options.body = JSON.stringify(data);\n      }\n\n      const response = await fetch(url, options);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      throw new Error(`Request failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n}","// packages/sdk/src/services/TransactionStatusService.ts\nimport { ThirdwebClient } from 'thirdweb';\nimport { Chain } from 'thirdweb/chains';\n\nexport type TransactionStatus = \n  | 'pending' \n  | 'confirmed' \n  | 'failed' \n  | 'dropped' \n  | 'replaced' \n  | 'not_found';\n\nexport interface TransactionReceipt {\n  transactionHash: string;\n  blockNumber: number;\n  blockHash: string;\n  gasUsed: string;\n  effectiveGasPrice: string;\n  status: 'success' | 'failure';\n  confirmations: number;\n  timestamp?: number;\n}\n\nexport interface TransactionStatusUpdate {\n  transactionHash: string;\n  status: TransactionStatus;\n  receipt?: TransactionReceipt;\n  error?: string;\n  timestamp: number;\n}\n\nexport interface WatchTransactionOptions {\n  maxRetries?: number;\n  retryInterval?: number;\n  timeout?: number;\n  confirmationsRequired?: number;\n}\n\nconst DEFAULT_OPTIONS: Required<WatchTransactionOptions> = {\n  maxRetries: 100, // 100 * 3s = 5 minutes max\n  retryInterval: 3000, // 3 seconds\n  timeout: 300000, // 5 minutes\n  confirmationsRequired: 1,\n};\n\nexport class TransactionStatusService {\n  private client: ThirdwebClient;\n  private activeWatchers: Map<string, { abort: AbortController; promise: Promise<TransactionStatusUpdate> }> = new Map();\n\n  constructor(client: ThirdwebClient) {\n    this.client = client;\n  }\n\n  /**\n   * Watch a transaction until it's confirmed or fails\n   */\n  async watchTransaction(\n    transactionHash: string,\n    chain: Chain,\n    options: WatchTransactionOptions = {}\n  ): Promise<TransactionStatusUpdate> {\n    const opts = { ...DEFAULT_OPTIONS, ...options };\n    const watcherKey = `${chain.id}-${transactionHash}`;\n\n    // If already watching this transaction, return the existing promise\n    if (this.activeWatchers.has(watcherKey)) {\n      return this.activeWatchers.get(watcherKey)!.promise;\n    }\n\n    const abortController = new AbortController();\n    \n    const promise = this._watchTransactionInternal(\n      transactionHash,\n      chain,\n      opts,\n      abortController.signal\n    );\n\n    // Store the watcher\n    this.activeWatchers.set(watcherKey, {\n      abort: abortController,\n      promise\n    });\n\n    // Clean up when done\n    promise.finally(() => {\n      this.activeWatchers.delete(watcherKey);\n    });\n\n    return promise;\n  }\n\n  /**\n   * Watch a transaction with callback for real-time updates\n   */\n  async watchTransactionWithCallback(\n    transactionHash: string,\n    chain: Chain,\n    onUpdate: (update: TransactionStatusUpdate) => void,\n    options: WatchTransactionOptions = {}\n  ): Promise<TransactionStatusUpdate> {\n    const opts = { ...DEFAULT_OPTIONS, ...options };\n    \n    let retries = 0;\n    const startTime = Date.now();\n\n    const poll = async (): Promise<TransactionStatusUpdate> => {\n      try {\n        // Check for timeout\n        if (Date.now() - startTime > opts.timeout) {\n          const update: TransactionStatusUpdate = {\n            transactionHash,\n            status: 'failed',\n            error: 'Transaction monitoring timeout',\n            timestamp: Date.now()\n          };\n          onUpdate(update);\n          return update;\n        }\n\n        // Get transaction receipt\n        const receipt = await this.getTransactionReceipt(transactionHash, chain);\n        \n        if (receipt) {\n          const status: TransactionStatus = receipt.status === 'success' ? 'confirmed' : 'failed';\n          const update: TransactionStatusUpdate = {\n            transactionHash,\n            status,\n            receipt,\n            timestamp: Date.now()\n          };\n          onUpdate(update);\n          return update;\n        }\n\n        // Transaction not mined yet\n        if (retries < opts.maxRetries) {\n          const update: TransactionStatusUpdate = {\n            transactionHash,\n            status: 'pending',\n            timestamp: Date.now()\n          };\n          onUpdate(update);\n          \n          retries++;\n          await new Promise(resolve => setTimeout(resolve, opts.retryInterval));\n          return poll();\n        } else {\n          const update: TransactionStatusUpdate = {\n            transactionHash,\n            status: 'failed',\n            error: 'Transaction not found after maximum retries',\n            timestamp: Date.now()\n          };\n          onUpdate(update);\n          return update;\n        }\n      } catch (error) {\n        retries++;\n        if (retries >= opts.maxRetries) {\n          const update: TransactionStatusUpdate = {\n            transactionHash,\n            status: 'failed',\n            error: error instanceof Error ? error.message : 'Unknown error',\n            timestamp: Date.now()\n          };\n          onUpdate(update);\n          return update;\n        }\n        \n        // Continue polling on error\n        await new Promise(resolve => setTimeout(resolve, opts.retryInterval));\n        return poll();\n      }\n    };\n\n    return poll();\n  }\n\n  /**\n   * Get transaction receipt (simplified implementation)\n   */\n  async getTransactionReceipt(\n    transactionHash: string,\n    chain: Chain\n  ): Promise<TransactionReceipt | null> {\n    try {\n      // Use a simplified approach that works with thirdweb's public RPC\n      const response = await fetch(`https://${chain.id}.rpc.thirdweb.com`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          method: 'eth_getTransactionReceipt',\n          params: [transactionHash],\n          id: 1\n        })\n      });\n\n      const data = await response.json();\n      const receipt = data.result;\n\n      if (!receipt) {\n        return null;\n      }\n\n      // Get current block for confirmations (simplified)\n      let confirmations = 1; // Assume at least 1 confirmation if receipt exists\n\n      return {\n        transactionHash: receipt.transactionHash,\n        blockNumber: parseInt(receipt.blockNumber, 16),\n        blockHash: receipt.blockHash,\n        gasUsed: parseInt(receipt.gasUsed, 16).toString(),\n        effectiveGasPrice: receipt.effectiveGasPrice ? parseInt(receipt.effectiveGasPrice, 16).toString() : '0',\n        status: receipt.status === '0x1' ? 'success' : 'failure',\n        confirmations,\n        timestamp: Date.now() // Use current timestamp as approximation\n      };\n    } catch (error) {\n      console.error('Error fetching transaction receipt:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Check if a transaction exists in the mempool or blockchain\n   */\n  async getTransactionStatus(\n    transactionHash: string,\n    chain: Chain\n  ): Promise<TransactionStatus> {\n    try {\n      const receipt = await this.getTransactionReceipt(transactionHash, chain);\n      \n      if (receipt) {\n        return receipt.status === 'success' ? 'confirmed' : 'failed';\n      }\n\n      // Check if transaction exists in mempool (simplified)\n      try {\n        const response = await fetch(`https://${chain.id}.rpc.thirdweb.com`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            jsonrpc: '2.0',\n            method: 'eth_getTransactionByHash',\n            params: [transactionHash],\n            id: 1\n          })\n        });\n\n        const data = await response.json();\n        if (data.result) {\n          return 'pending';\n        }\n      } catch (error) {\n        console.warn('Error checking mempool:', error);\n      }\n\n      return 'not_found';\n    } catch (error) {\n      console.error('Error checking transaction status:', error);\n      return 'not_found';\n    }\n  }\n\n  /**\n   * Cancel watching a specific transaction\n   */\n  cancelWatch(transactionHash: string, chainId: number): void {\n    const watcherKey = `${chainId}-${transactionHash}`;\n    const watcher = this.activeWatchers.get(watcherKey);\n    \n    if (watcher) {\n      watcher.abort.abort();\n      this.activeWatchers.delete(watcherKey);\n    }\n  }\n\n  /**\n   * Cancel all active watchers\n   */\n  cancelAllWatches(): void {\n    for (const watcher of this.activeWatchers.values()) {\n      watcher.abort.abort();\n    }\n    this.activeWatchers.clear();\n  }\n\n  /**\n   * Get the number of active watchers\n   */\n  getActiveWatchersCount(): number {\n    return this.activeWatchers.size;\n  }\n\n  /**\n   * Internal implementation for watching transactions\n   */\n  private async _watchTransactionInternal(\n    transactionHash: string,\n    chain: Chain,\n    options: Required<WatchTransactionOptions>,\n    signal: AbortSignal\n  ): Promise<TransactionStatusUpdate> {\n    let retries = 0;\n    const startTime = Date.now();\n\n    const poll = async (): Promise<TransactionStatusUpdate> => {\n      if (signal.aborted) {\n        throw new Error('Transaction watching was cancelled');\n      }\n\n      try {\n        // Check for timeout\n        if (Date.now() - startTime > options.timeout) {\n          return {\n            transactionHash,\n            status: 'failed',\n            error: 'Transaction monitoring timeout',\n            timestamp: Date.now()\n          };\n        }\n\n        // Get transaction receipt\n        const receipt = await this.getTransactionReceipt(transactionHash, chain);\n        \n        if (receipt) {\n          // Check if we have enough confirmations\n          if (receipt.confirmations >= options.confirmationsRequired) {\n            return {\n              transactionHash,\n              status: receipt.status === 'success' ? 'confirmed' : 'failed',\n              receipt,\n              timestamp: Date.now()\n            };\n          } else {\n            // Transaction mined but not enough confirmations\n            if (retries < options.maxRetries) {\n              retries++;\n              await new Promise(resolve => setTimeout(resolve, options.retryInterval));\n              return poll();\n            }\n          }\n        }\n\n        // Transaction not mined yet\n        if (retries < options.maxRetries) {\n          retries++;\n          await new Promise(resolve => setTimeout(resolve, options.retryInterval));\n          return poll();\n        } else {\n          return {\n            transactionHash,\n            status: 'failed',\n            error: 'Transaction not found after maximum retries',\n            timestamp: Date.now()\n          };\n        }\n      } catch (error) {\n        if (signal.aborted) {\n          throw new Error('Transaction watching was cancelled');\n        }\n        \n        retries++;\n        if (retries >= options.maxRetries) {\n          return {\n            transactionHash,\n            status: 'failed',\n            error: error instanceof Error ? error.message : 'Unknown error',\n            timestamp: Date.now()\n          };\n        }\n        \n        // Continue polling on error\n        await new Promise(resolve => setTimeout(resolve, options.retryInterval));\n        return poll();\n      }\n    };\n\n    return poll();\n  }\n}","// packages/sdk/src/services/BalanceWatcherService.ts\nimport { ThirdwebClient, getContract, readContract } from 'thirdweb';\nimport { Chain } from 'thirdweb/chains';\nimport { balanceOf } from 'thirdweb/extensions/erc20';\n\nexport interface BalanceUpdate {\n  address: string;\n  tokenAddress?: string; // undefined for native token\n  balance: string;\n  previousBalance?: string;\n  chainId: number;\n  timestamp: number;\n}\n\nexport interface ChainBalanceMap {\n  [chainId: number]: {\n    native: string;\n    tokens: { [tokenAddress: string]: string };\n  };\n}\n\nexport interface BalanceWatchOptions {\n  pollInterval?: number;\n  enableOptimisticUpdates?: boolean;\n  refreshAfterTransaction?: boolean;\n  maxRetries?: number;\n}\n\nconst DEFAULT_BALANCE_OPTIONS: Required<BalanceWatchOptions> = {\n  pollInterval: 10000, // 10 seconds\n  enableOptimisticUpdates: true,\n  refreshAfterTransaction: true,\n  maxRetries: 3,\n};\n\nexport class BalanceWatcherService {\n  private client: ThirdwebClient;\n  private activeWatchers: Map<string, { \n    interval: NodeJS.Timeout; \n    lastBalance: string; \n    callback: (update: BalanceUpdate) => void \n  }> = new Map();\n  private balanceCache: Map<string, { balance: string; timestamp: number }> = new Map();\n  private readonly CACHE_DURATION = 5000; // 5 seconds\n\n  constructor(client: ThirdwebClient) {\n    this.client = client;\n  }\n\n  /**\n   * Watch balance changes for an address\n   */\n  watchBalance(\n    address: string,\n    chain: Chain,\n    tokenAddress: string | undefined,\n    onBalanceChange: (update: BalanceUpdate) => void,\n    options: BalanceWatchOptions = {}\n  ): string {\n    const opts = { ...DEFAULT_BALANCE_OPTIONS, ...options };\n    const watcherKey = `${chain.id}-${address}-${tokenAddress || 'native'}`;\n\n    // Cancel existing watcher if any\n    this.cancelBalanceWatch(watcherKey);\n\n    const pollBalance = async () => {\n      try {\n        const currentBalance = await this.getBalance(address, chain, tokenAddress);\n        const cached = this.balanceCache.get(watcherKey);\n        const previousBalance = cached?.balance;\n\n        // Only trigger callback if balance changed\n        if (!previousBalance || currentBalance !== previousBalance) {\n          const update: BalanceUpdate = {\n            address,\n            tokenAddress,\n            balance: currentBalance,\n            previousBalance,\n            chainId: chain.id,\n            timestamp: Date.now()\n          };\n\n          onBalanceChange(update);\n        }\n\n        // Update cache\n        this.balanceCache.set(watcherKey, {\n          balance: currentBalance,\n          timestamp: Date.now()\n        });\n\n      } catch (error) {\n        console.error(`Error polling balance for ${watcherKey}:`, error);\n      }\n    };\n\n    // Initial balance fetch\n    pollBalance();\n\n    // Set up polling interval\n    const interval = setInterval(pollBalance, opts.pollInterval);\n\n    // Store the watcher\n    this.activeWatchers.set(watcherKey, {\n      interval,\n      lastBalance: '0',\n      callback: onBalanceChange\n    });\n\n    return watcherKey;\n  }\n\n  /**\n   * Get current balance for an address\n   */\n  async getBalance(\n    address: string,\n    chain: Chain,\n    tokenAddress?: string,\n    useCache: boolean = true\n  ): Promise<string> {\n    const cacheKey = `${chain.id}-${address}-${tokenAddress || 'native'}`;\n\n    // Check cache first\n    if (useCache) {\n      const cached = this.balanceCache.get(cacheKey);\n      if (cached && (Date.now() - cached.timestamp) < this.CACHE_DURATION) {\n        return cached.balance;\n      }\n    }\n\n    try {\n      let balance: string;\n\n      if (tokenAddress) {\n        // ERC20 token balance\n        const contract = getContract({\n          client: this.client,\n          chain,\n          address: tokenAddress,\n        });\n\n        const balanceResult = await readContract({\n          contract,\n          method: \"function balanceOf(address) view returns (uint256)\",\n          params: [address]\n        });\n\n        balance = balanceResult.toString();\n      } else {\n        // Native token balance - use direct RPC call\n        const response = await fetch(`https://${chain.id}.rpc.thirdweb.com`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            jsonrpc: '2.0',\n            method: 'eth_getBalance',\n            params: [address, 'latest'],\n            id: 1\n          })\n        });\n\n        const data = await response.json();\n        if (data.result) {\n          balance = parseInt(data.result, 16).toString();\n        } else {\n          balance = '0';\n        }\n      }\n\n      // Update cache\n      this.balanceCache.set(cacheKey, {\n        balance,\n        timestamp: Date.now()\n      });\n\n      return balance;\n    } catch (error) {\n      console.error(`Error fetching balance for ${address}:`, error);\n      return '0';\n    }\n  }\n\n  /**\n   * Refresh balance after a transaction\n   */\n  async refreshBalanceAfterTransaction(\n    transactionHash: string,\n    address: string,\n    chain: Chain,\n    tokenAddress?: string,\n    maxWaitTime: number = 30000 // 30 seconds\n  ): Promise<BalanceUpdate> {\n    const startTime = Date.now();\n    const watcherKey = `${chain.id}-${address}-${tokenAddress || 'native'}`;\n    \n    // Get initial balance\n    const initialBalance = await this.getBalance(address, chain, tokenAddress, false);\n    \n    // Poll for balance change\n    const poll = async (): Promise<BalanceUpdate> => {\n      if (Date.now() - startTime > maxWaitTime) {\n        throw new Error('Balance refresh timeout');\n      }\n\n      const currentBalance = await this.getBalance(address, chain, tokenAddress, false);\n      \n      if (currentBalance !== initialBalance) {\n        const update: BalanceUpdate = {\n          address,\n          tokenAddress,\n          balance: currentBalance,\n          previousBalance: initialBalance,\n          chainId: chain.id,\n          timestamp: Date.now()\n        };\n\n        // Notify any active watchers\n        const watcher = this.activeWatchers.get(watcherKey);\n        if (watcher) {\n          watcher.callback(update);\n        }\n\n        return update;\n      }\n\n      // Wait and try again\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      return poll();\n    };\n\n    return poll();\n  }\n\n  /**\n   * Get balances across multiple chains\n   */\n  async getMultiChainBalances(\n    address: string,\n    chains: Chain[],\n    tokenAddresses: { [chainId: number]: string[] } = {}\n  ): Promise<ChainBalanceMap> {\n    const balancePromises = chains.map(async (chain) => {\n      try {\n        // Get native balance\n        const nativeBalance = await this.getBalance(address, chain);\n        \n        // Get token balances for this chain\n        const tokenAddrs = tokenAddresses[chain.id] || [];\n        const tokenBalancePromises = tokenAddrs.map(async (tokenAddress) => ({\n          tokenAddress,\n          balance: await this.getBalance(address, chain, tokenAddress)\n        }));\n        \n        const tokenBalances = await Promise.all(tokenBalancePromises);\n        const tokensMap: { [tokenAddress: string]: string } = {};\n        \n        tokenBalances.forEach(({ tokenAddress, balance }) => {\n          tokensMap[tokenAddress] = balance;\n        });\n\n        return {\n          chainId: chain.id,\n          native: nativeBalance,\n          tokens: tokensMap\n        };\n      } catch (error) {\n        console.error(`Error fetching balances for chain ${chain.id}:`, error);\n        return {\n          chainId: chain.id,\n          native: '0',\n          tokens: {}\n        };\n      }\n    });\n\n    const results = await Promise.all(balancePromises);\n    const balanceMap: ChainBalanceMap = {};\n    \n    results.forEach(result => {\n      balanceMap[result.chainId] = {\n        native: result.native,\n        tokens: result.tokens\n      };\n    });\n\n    return balanceMap;\n  }\n\n  /**\n   * Force refresh all cached balances\n   */\n  async refreshAllBalances(): Promise<void> {\n    const refreshPromises = Array.from(this.activeWatchers.entries()).map(\n      async ([watcherKey, watcher]) => {\n        try {\n          const [chainId, address, tokenOrNative] = watcherKey.split('-');\n          const tokenAddress = tokenOrNative === 'native' ? undefined : tokenOrNative;\n          \n          // Clear cache to force fresh fetch\n          this.balanceCache.delete(watcherKey);\n          \n          // This will trigger the watcher callback if balance changed\n          await this.getBalance(address, { id: parseInt(chainId) } as Chain, tokenAddress, false);\n        } catch (error) {\n          console.error(`Error refreshing balance for ${watcherKey}:`, error);\n        }\n      }\n    );\n\n    await Promise.all(refreshPromises);\n  }\n\n  /**\n   * Cancel a specific balance watch\n   */\n  cancelBalanceWatch(watcherKey: string): void {\n    const watcher = this.activeWatchers.get(watcherKey);\n    if (watcher) {\n      clearInterval(watcher.interval);\n      this.activeWatchers.delete(watcherKey);\n      this.balanceCache.delete(watcherKey);\n    }\n  }\n\n  /**\n   * Cancel balance watch by parameters\n   */\n  cancelBalanceWatchFor(\n    address: string,\n    chainId: number,\n    tokenAddress?: string\n  ): void {\n    const watcherKey = `${chainId}-${address}-${tokenAddress || 'native'}`;\n    this.cancelBalanceWatch(watcherKey);\n  }\n\n  /**\n   * Cancel all balance watchers\n   */\n  cancelAllBalanceWatches(): void {\n    for (const [watcherKey, watcher] of this.activeWatchers) {\n      clearInterval(watcher.interval);\n    }\n    this.activeWatchers.clear();\n    this.balanceCache.clear();\n  }\n\n  /**\n   * Get active watchers count\n   */\n  getActiveWatchersCount(): number {\n    return this.activeWatchers.size;\n  }\n\n  /**\n   * Clear balance cache\n   */\n  clearCache(): void {\n    this.balanceCache.clear();\n  }\n\n  /**\n   * Get cached balance if available\n   */\n  getCachedBalance(\n    address: string,\n    chainId: number,\n    tokenAddress?: string\n  ): string | null {\n    const cacheKey = `${chainId}-${address}-${tokenAddress || 'native'}`;\n    const cached = this.balanceCache.get(cacheKey);\n    \n    if (cached && (Date.now() - cached.timestamp) < this.CACHE_DURATION) {\n      return cached.balance;\n    }\n    \n    return null;\n  }\n}","// packages/sdk/src/services/RelayStatusService.ts\nimport { ThirdwebClient } from 'thirdweb';\nimport { Chain } from 'thirdweb/chains';\nimport { TransactionStatusService, TransactionStatus, TransactionReceipt } from './TransactionStatusService';\n\nexport interface RelayStatus {\n  relayId: string;\n  sourceChain: number;\n  destinationChain: number;\n  sourceTransactionHash: string;\n  destinationTransactionHash?: string;\n  status: 'initiated' | 'pending' | 'relaying' | 'completed' | 'failed';\n  estimatedCompletionTime?: number;\n  actualCompletionTime?: number;\n  error?: string;\n  progress: number; // 0-100\n  sourceAmount: string;\n  destinationAmount?: string;\n  tokenSymbol: string;\n}\n\nexport interface RelayUpdate {\n  relayId: string;\n  status: RelayStatus['status'];\n  progress: number;\n  error?: string;\n  timestamp: number;\n  destinationTransactionHash?: string;\n}\n\nexport interface RelayWatchOptions {\n  maxWaitTime?: number;\n  pollInterval?: number;\n  enableProgressUpdates?: boolean;\n}\n\nconst DEFAULT_RELAY_OPTIONS: Required<RelayWatchOptions> = {\n  maxWaitTime: 600000, // 10 minutes\n  pollInterval: 5000, // 5 seconds\n  enableProgressUpdates: true,\n};\n\nexport class RelayStatusService {\n  private client: ThirdwebClient;\n  private transactionStatusService: TransactionStatusService;\n  private activeRelayWatchers: Map<string, { \n    abort: AbortController; \n    promise: Promise<RelayStatus> \n  }> = new Map();\n  \n  // Relay.link API endpoints (if available)\n  private readonly RELAY_API_BASE = 'https://api.relay.link';\n\n  constructor(client: ThirdwebClient) {\n    this.client = client;\n    this.transactionStatusService = new TransactionStatusService(client);\n  }\n\n  /**\n   * Track a relay transaction from source to destination\n   */\n  async trackRelay(\n    relayId: string,\n    sourceChain: Chain,\n    destinationChain: Chain,\n    sourceTransactionHash: string,\n    options: RelayWatchOptions = {}\n  ): Promise<RelayStatus> {\n    const opts = { ...DEFAULT_RELAY_OPTIONS, ...options };\n\n    // If already tracking this relay, return existing promise\n    if (this.activeRelayWatchers.has(relayId)) {\n      return this.activeRelayWatchers.get(relayId)!.promise;\n    }\n\n    const abortController = new AbortController();\n    \n    const promise = this._trackRelayInternal(\n      relayId,\n      sourceChain,\n      destinationChain,\n      sourceTransactionHash,\n      opts,\n      abortController.signal\n    );\n\n    this.activeRelayWatchers.set(relayId, {\n      abort: abortController,\n      promise\n    });\n\n    // Clean up when done\n    promise.finally(() => {\n      this.activeRelayWatchers.delete(relayId);\n    });\n\n    return promise;\n  }\n\n  /**\n   * Track relay with callback for real-time updates\n   */\n  async trackRelayWithCallback(\n    relayId: string,\n    sourceChain: Chain,\n    destinationChain: Chain,\n    sourceTransactionHash: string,\n    onUpdate: (update: RelayUpdate) => void,\n    options: RelayWatchOptions = {}\n  ): Promise<RelayStatus> {\n    const opts = { ...DEFAULT_RELAY_OPTIONS, ...options };\n    const startTime = Date.now();\n    let lastProgress = 0;\n\n    const poll = async (): Promise<RelayStatus> => {\n      try {\n        // Check timeout\n        if (Date.now() - startTime > opts.maxWaitTime) {\n          const update: RelayUpdate = {\n            relayId,\n            status: 'failed',\n            progress: lastProgress,\n            error: 'Relay tracking timeout',\n            timestamp: Date.now()\n          };\n          onUpdate(update);\n          \n          return {\n            relayId,\n            sourceChain: sourceChain.id,\n            destinationChain: destinationChain.id,\n            sourceTransactionHash,\n            status: 'failed',\n            progress: lastProgress,\n            error: 'Relay tracking timeout',\n            sourceAmount: '0',\n            tokenSymbol: 'UNKNOWN'\n          };\n        }\n\n        // Get current relay status\n        const relayStatus = await this.getRelayStatus(\n          relayId,\n          sourceChain,\n          destinationChain,\n          sourceTransactionHash\n        );\n\n        // Send update if status or progress changed\n        if (relayStatus.progress !== lastProgress || opts.enableProgressUpdates) {\n          const update: RelayUpdate = {\n            relayId,\n            status: relayStatus.status,\n            progress: relayStatus.progress,\n            error: relayStatus.error,\n            timestamp: Date.now(),\n            destinationTransactionHash: relayStatus.destinationTransactionHash\n          };\n          onUpdate(update);\n          lastProgress = relayStatus.progress;\n        }\n\n        // Continue polling if not complete\n        if (relayStatus.status === 'completed' || relayStatus.status === 'failed') {\n          return relayStatus;\n        }\n\n        // Wait and poll again\n        await new Promise(resolve => setTimeout(resolve, opts.pollInterval));\n        return poll();\n\n      } catch (error) {\n        const update: RelayUpdate = {\n          relayId,\n          status: 'failed',\n          progress: lastProgress,\n          error: error instanceof Error ? error.message : 'Unknown error',\n          timestamp: Date.now()\n        };\n        onUpdate(update);\n\n        throw error;\n      }\n    };\n\n    return poll();\n  }\n\n  /**\n   * Get current relay status\n   */\n  async getRelayStatus(\n    relayId: string,\n    sourceChain: Chain,\n    destinationChain: Chain,\n    sourceTransactionHash: string\n  ): Promise<RelayStatus> {\n    try {\n      // Step 1: Check source transaction status\n      const sourceStatus = await this.transactionStatusService.getTransactionStatus(\n        sourceTransactionHash,\n        sourceChain\n      );\n\n      if (sourceStatus === 'not_found' || sourceStatus === 'failed') {\n        return {\n          relayId,\n          sourceChain: sourceChain.id,\n          destinationChain: destinationChain.id,\n          sourceTransactionHash,\n          status: 'failed',\n          progress: 0,\n          error: sourceStatus === 'not_found' ? 'Source transaction not found' : 'Source transaction failed',\n          sourceAmount: '0',\n          tokenSymbol: 'UNKNOWN'\n        };\n      }\n\n      if (sourceStatus === 'pending') {\n        return {\n          relayId,\n          sourceChain: sourceChain.id,\n          destinationChain: destinationChain.id,\n          sourceTransactionHash,\n          status: 'pending',\n          progress: 25,\n          sourceAmount: '0',\n          tokenSymbol: 'UNKNOWN'\n        };\n      }\n\n      // Step 2: Source transaction confirmed, now check relay progress\n      // Try to get relay information from Relay.link API (if available)\n      try {\n        const apiStatus = await this.getRelayStatusFromAPI(relayId);\n        if (apiStatus) {\n          return apiStatus;\n        }\n      } catch (apiError) {\n        console.warn('Relay API unavailable, using fallback method:', apiError);\n      }\n\n      // Step 3: Fallback method - estimate progress based on time\n      const sourceReceipt = await this.transactionStatusService.getTransactionReceipt(\n        sourceTransactionHash,\n        sourceChain\n      );\n\n      if (sourceReceipt) {\n        const elapsedTime = Date.now() - (sourceReceipt.timestamp || Date.now());\n        const estimatedRelayTime = this.getEstimatedRelayTime(sourceChain.id, destinationChain.id);\n        \n        let progress = 50; // Source confirmed\n        let status: RelayStatus['status'] = 'relaying';\n\n        if (elapsedTime > estimatedRelayTime) {\n          // Should be complete by now, try to find destination transaction\n          const destinationTxHash = await this.findDestinationTransaction(\n            sourceTransactionHash,\n            destinationChain,\n            relayId\n          );\n\n          if (destinationTxHash) {\n            const destStatus = await this.transactionStatusService.getTransactionStatus(\n              destinationTxHash,\n              destinationChain\n            );\n\n            if (destStatus === 'confirmed') {\n              progress = 100;\n              status = 'completed';\n            } else if (destStatus === 'failed') {\n              status = 'failed';\n              progress = 75;\n            }\n\n            return {\n              relayId,\n              sourceChain: sourceChain.id,\n              destinationChain: destinationChain.id,\n              sourceTransactionHash,\n              destinationTransactionHash: destinationTxHash,\n              status,\n              progress,\n              sourceAmount: '0',\n              tokenSymbol: 'USDC'\n            };\n          }\n        } else {\n          // Still in progress, estimate based on elapsed time\n          progress = Math.min(95, 50 + (elapsedTime / estimatedRelayTime) * 45);\n        }\n\n        return {\n          relayId,\n          sourceChain: sourceChain.id,\n          destinationChain: destinationChain.id,\n          sourceTransactionHash,\n          status,\n          progress,\n          sourceAmount: '0',\n          tokenSymbol: 'USDC',\n          estimatedCompletionTime: (sourceReceipt.timestamp || Date.now()) + estimatedRelayTime\n        };\n      }\n\n      // Default status if we can't determine anything\n      return {\n        relayId,\n        sourceChain: sourceChain.id,\n        destinationChain: destinationChain.id,\n        sourceTransactionHash,\n        status: 'initiated',\n        progress: 10,\n        sourceAmount: '0',\n        tokenSymbol: 'UNKNOWN'\n      };\n\n    } catch (error) {\n      console.error('Error getting relay status:', error);\n      return {\n        relayId,\n        sourceChain: sourceChain.id,\n        destinationChain: destinationChain.id,\n        sourceTransactionHash,\n        status: 'failed',\n        progress: 0,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        sourceAmount: '0',\n        tokenSymbol: 'UNKNOWN'\n      };\n    }\n  }\n\n  /**\n   * Cancel relay tracking\n   */\n  cancelRelayTracking(relayId: string): void {\n    const watcher = this.activeRelayWatchers.get(relayId);\n    if (watcher) {\n      watcher.abort.abort();\n      this.activeRelayWatchers.delete(relayId);\n    }\n  }\n\n  /**\n   * Cancel all relay tracking\n   */\n  cancelAllRelayTracking(): void {\n    for (const watcher of this.activeRelayWatchers.values()) {\n      watcher.abort.abort();\n    }\n    this.activeRelayWatchers.clear();\n  }\n\n  /**\n   * Get estimated relay time between chains\n   */\n  private getEstimatedRelayTime(sourceChainId: number, destinationChainId: number): number {\n    // Base relay time (2 minutes)\n    let baseTime = 120000;\n\n    // Add extra time for specific chains\n    const slowChains = [1, 137, 10]; // Ethereum, Polygon, Optimism\n    if (slowChains.includes(sourceChainId)) {\n      baseTime += 60000; // Add 1 minute\n    }\n\n    // Destination is always ApeChain, which is fast\n    if (destinationChainId === 33139) {\n      baseTime -= 30000; // Subtract 30 seconds\n    }\n\n    return Math.max(60000, baseTime); // Minimum 1 minute\n  }\n\n  /**\n   * Try to get relay status from Relay.link API\n   */\n  private async getRelayStatusFromAPI(relayId: string): Promise<RelayStatus | null> {\n    try {\n      // This would be the actual API call to Relay.link\n      // For now, return null as API might not be publicly available\n      const response = await fetch(`${this.RELAY_API_BASE}/status/${relayId}`);\n      \n      if (!response.ok) {\n        return null;\n      }\n\n      const data = await response.json();\n      \n      // Transform API response to our RelayStatus format\n      return {\n        relayId,\n        sourceChain: data.sourceChain,\n        destinationChain: data.destinationChain,\n        sourceTransactionHash: data.sourceTx,\n        destinationTransactionHash: data.destTx,\n        status: this.mapApiStatusToRelayStatus(data.status),\n        progress: data.progress || 0,\n        sourceAmount: data.sourceAmount || '0',\n        destinationAmount: data.destAmount,\n        tokenSymbol: data.token || 'USDC',\n        estimatedCompletionTime: data.eta,\n        actualCompletionTime: data.completedAt\n      };\n    } catch (error) {\n      console.warn('Failed to fetch from Relay API:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Map API status to our RelayStatus\n   */\n  private mapApiStatusToRelayStatus(apiStatus: string): RelayStatus['status'] {\n    switch (apiStatus?.toLowerCase()) {\n      case 'pending':\n        return 'pending';\n      case 'processing':\n      case 'bridging':\n        return 'relaying';\n      case 'completed':\n      case 'success':\n        return 'completed';\n      case 'failed':\n      case 'error':\n        return 'failed';\n      default:\n        return 'initiated';\n    }\n  }\n\n  /**\n   * Try to find the destination transaction by looking for patterns\n   */\n  private async findDestinationTransaction(\n    sourceTransactionHash: string,\n    destinationChain: Chain,\n    relayId: string\n  ): Promise<string | null> {\n    try {\n      // This is a simplified approach - in reality, you might need to:\n      // 1. Look at relay bridge contract events\n      // 2. Search for transactions with specific patterns\n      // 3. Use indexing services to find related transactions\n      \n      // For now, return null as this requires more sophisticated tracking\n      // In a production environment, you'd use:\n      // - Event logs from bridge contracts\n      // - Graph Protocol or similar indexing\n      // - Relay.link API if available\n      \n      return null;\n    } catch (error) {\n      console.error('Error finding destination transaction:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Generate a unique relay ID based on transaction hash and timestamp\n   */\n  static generateRelayId(transactionHash: string, timestamp?: number): string {\n    const ts = timestamp || Date.now();\n    return `relay_${transactionHash.slice(2, 10)}_${ts}`;\n  }\n\n  /**\n   * Internal tracking implementation\n   */\n  private async _trackRelayInternal(\n    relayId: string,\n    sourceChain: Chain,\n    destinationChain: Chain,\n    sourceTransactionHash: string,\n    options: Required<RelayWatchOptions>,\n    signal: AbortSignal\n  ): Promise<RelayStatus> {\n    const startTime = Date.now();\n\n    const poll = async (): Promise<RelayStatus> => {\n      if (signal.aborted) {\n        throw new Error('Relay tracking was cancelled');\n      }\n\n      // Check timeout\n      if (Date.now() - startTime > options.maxWaitTime) {\n        return {\n          relayId,\n          sourceChain: sourceChain.id,\n          destinationChain: destinationChain.id,\n          sourceTransactionHash,\n          status: 'failed',\n          progress: 0,\n          error: 'Relay tracking timeout',\n          sourceAmount: '0',\n          tokenSymbol: 'UNKNOWN'\n        };\n      }\n\n      const relayStatus = await this.getRelayStatus(\n        relayId,\n        sourceChain,\n        destinationChain,\n        sourceTransactionHash\n      );\n\n      if (relayStatus.status === 'completed' || relayStatus.status === 'failed') {\n        return relayStatus;\n      }\n\n      // Continue polling\n      await new Promise(resolve => setTimeout(resolve, options.pollInterval));\n      return poll();\n    };\n\n    return poll();\n  }\n}","// packages/sdk/src/core/ApeChainTippingSDK.ts\nimport { createThirdwebClient, getContract, prepareContractCall, readContract, ThirdwebClient } from 'thirdweb';\nimport { \n  Chain, \n  ethereum, \n  polygon, \n  optimism, \n  bsc, \n  avalanche, \n  base, \n  arbitrum, \n  defineChain \n} from 'thirdweb/chains';\nimport { ApeChainRelayService } from '../services/ApeChainRelayService';\nimport { TransactionStatusService } from '../services/TransactionStatusService';\nimport { BalanceWatcherService } from '../services/BalanceWatcherService';\nimport { RelayStatusService } from '../services/RelayStatusService';\nimport { \n  MembershipTier,\n  STREAMING_PLATFORM_TIPPING_ABI as ABI,\n  CONTRACT_CONSTANTS,\n  SUPPORTED_CHAINS,\n  SUPPORTED_TESTNETS,\n  getContractAddress,\n  isContractDeployed\n} from '@tippingchain/contracts-interface';\n\nconst TypedABI = ABI as any;\nimport type { \n  ViewerRewardParams, \n  BatchViewerRewardParams, \n  ViewerRewardResult, \n  ViewerRewardStats, \n  ViewerRewardsPlatformStats,\n  ViewerInfo,\n  ViewerRegistration,\n  RewardPoolParams,\n  RewardPoolResult,\n  RewardPoolCalculation\n} from '../types/viewer-rewards';\n\nexport interface ApeChainTippingConfig {\n  clientId: string;\n  environment: 'development' | 'production';\n  streamingPlatformAddresses?: Record<number, string>; // Optional - can use default addresses from interface\n  useTestnet?: boolean; // Use testnet addresses\n}\n\n// Re-export MembershipTier from contracts-interface\nexport { MembershipTier } from '@tippingchain/contracts-interface';\n\nexport interface Creator {\n  id: number;\n  wallet: string;\n  active: boolean;\n  totalTips: string;\n  tipCount: number;\n  tier?: MembershipTier;\n  creatorShareBps?: number; // Creator share in basis points\n}\n\nexport interface TipParams {\n  sourceChainId: number;\n  creatorId: number; // NEW: Use creator ID instead of address\n  token: string; // address or 'native'\n  amount: string;\n}\n\nexport interface TipResult {\n  success: boolean;\n  sourceTransactionHash?: string;\n  relayId?: string;\n  estimatedUsdcAmount?: string;\n  creatorId?: number;\n  error?: string;\n}\n\nexport interface CreatorRegistration {\n  creatorWallet: string;\n  tier: MembershipTier;\n  thirdwebId?: string; // Optional thirdweb account ID\n  chainId?: number; // Optional - if not specified, registers on all deployed chains\n}\n\nexport interface TipSplits {\n  platformFee: string;\n  creatorAmount: string;\n  businessAmount: string;\n}\n\nexport interface PlatformStats {\n  totalTips: string;\n  totalCount: number;\n  totalRelayed: string;\n  activeCreators: number;\n  autoRelayEnabled: boolean;\n}\n\nexport class ApeChainTippingSDK {\n  private client: ThirdwebClient;\n  private config: ApeChainTippingConfig;\n  private relayService: ApeChainRelayService;\n  \n  // Real-time services\n  public readonly transactionStatus: TransactionStatusService;\n  public readonly balanceWatcher: BalanceWatcherService;\n  public readonly relayStatus: RelayStatusService;\n\n  constructor(config: ApeChainTippingConfig) {\n    if (!config.clientId) {\n      throw new Error('clientId is required');\n    }\n    // streamingPlatformAddresses is now optional - we can use defaults from contracts-interface\n    \n    this.config = config;\n    this.client = createThirdwebClient({ clientId: config.clientId });\n    this.relayService = new ApeChainRelayService();\n    \n    // Initialize real-time services\n    this.transactionStatus = new TransactionStatusService(this.client);\n    this.balanceWatcher = new BalanceWatcherService(this.client);\n    this.relayStatus = new RelayStatusService(this.client);\n  }\n\n  private getContractAddress(chainId: number): string | undefined {\n    // First check if custom addresses were provided in config\n    if (this.config.streamingPlatformAddresses && this.config.streamingPlatformAddresses[chainId]) {\n      return this.config.streamingPlatformAddresses[chainId];\n    }\n    // Otherwise use default addresses from contracts-interface\n    return getContractAddress(chainId, this.config.useTestnet || false);\n  }\n\n  async sendTip(params: TipParams): Promise<TipResult> {\n    try {\n      // 1. Get unified contract\n      const contractAddress = this.getContractAddress(params.sourceChainId);\n      if (!contractAddress) {\n        throw new Error(`Source chain ${params.sourceChainId} not supported or contract not deployed`);\n      }\n\n      // 2. Validate creator exists and is active\n      const creator = await this.getCreator(params.creatorId, params.sourceChainId);\n      if (!creator.active) {\n        throw new Error(`Creator ${params.creatorId} is not active`);\n      }\n\n      // 3. Execute tip transaction on unified contract\n      const chain = this.getChainById(params.sourceChainId);\n      const contract = getContract({\n        client: this.client,\n        chain,\n        address: contractAddress,\n        abi: TypedABI,\n      });\n\n      let transaction;\n      if (params.token === 'native') {\n        transaction = prepareContractCall({\n          contract,\n          method: \"function tipCreatorETH(uint256 creatorId)\",\n          params: [BigInt(params.creatorId)],\n          value: BigInt(params.amount),\n        });\n      } else {\n        transaction = prepareContractCall({\n          contract,\n          method: \"function tipCreatorToken(uint256 creatorId, address token, uint256 amount)\",\n          params: [BigInt(params.creatorId), params.token, BigInt(params.amount)],\n        });\n      }\n\n      // 4. Execute transaction (this would be done by the connected wallet)\n      const result = await this.executeTransaction(transaction);\n\n      // 5. Get relay information for USDC conversion  \n      const relayResult = await this.relayService.relayTipToApeChain({\n        fromChainId: params.sourceChainId,\n        fromToken: params.token,\n        amount: params.amount,\n        creatorAddress: creator.wallet, // Use actual creator wallet from registry\n        targetToken: 'USDC' // Target USDC on ApeChain\n      });\n\n      return {\n        success: true,\n        sourceTransactionHash: (result as any).transactionHash,\n        relayId: relayResult.relayId,\n        creatorId: params.creatorId,\n        estimatedUsdcAmount: relayResult.estimatedUsdcAmount || '0',\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  // Creator management methods\n  async addCreator(registration: CreatorRegistration): Promise<number> {\n    // If chainId is specified, only register on that chain\n    if (registration.chainId) {\n      return this.addCreatorToChain(\n        registration.creatorWallet, \n        registration.tier, \n        registration.thirdwebId,\n        registration.chainId\n      );\n    }\n\n    // Otherwise, register on all supported source chains\n    const sourceChains = [\n      SUPPORTED_CHAINS.ETHEREUM,\n      SUPPORTED_CHAINS.POLYGON,\n      SUPPORTED_CHAINS.OPTIMISM,\n      SUPPORTED_CHAINS.BSC,\n      SUPPORTED_CHAINS.ABSTRACT,\n      SUPPORTED_CHAINS.AVALANCHE,\n      SUPPORTED_CHAINS.BASE,\n      SUPPORTED_CHAINS.ARBITRUM,\n      SUPPORTED_CHAINS.TAIKO\n    ];\n\n    let creatorId: number | null = null;\n    const errors: string[] = [];\n\n    // Register creator on all chains\n    for (const chainId of sourceChains) {\n      try {\n        const contractAddress = this.getContractAddress(chainId);\n        if (!contractAddress) {\n          console.warn(`Chain ${chainId} not deployed, skipping`);\n          continue;\n        }\n\n        const id = await this.addCreatorToChain(\n          registration.creatorWallet, \n          registration.tier,\n          registration.thirdwebId, \n          chainId\n        );\n        \n        // All chains should return the same creator ID\n        if (creatorId === null) {\n          creatorId = id;\n        } else if (creatorId !== id) {\n          console.warn(`Creator ID mismatch: expected ${creatorId}, got ${id} on chain ${chainId}`);\n        }\n      } catch (error) {\n        errors.push(`Chain ${chainId}: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    }\n\n    if (creatorId === null) {\n      throw new Error(`Failed to register creator on any chain. Errors: ${errors.join(', ')}`);\n    }\n\n    return creatorId;\n  }\n\n  private async addCreatorToChain(\n    creatorWallet: string, \n    tier: MembershipTier, \n    thirdwebId: string | undefined,\n    chainId: number\n  ): Promise<number> {\n    const contractAddress = this.getContractAddress(chainId);\n    \n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported for creator registration or contract not deployed`);\n    }\n\n    const chain = this.getChainById(chainId);\n      const contract = getContract({\n        client: this.client,\n        chain,\n        address: contractAddress,\n        abi: TypedABI,\n      });\n\n    const transaction = prepareContractCall({\n      contract,\n      method: \"function addCreator(address creatorWallet, uint8 tier, string thirdwebId)\",\n      params: [creatorWallet, tier, thirdwebId || \"\"],\n    });\n\n    await this.executeTransaction(transaction);\n    \n    // In production, you'd parse the CreatorAdded event to get the actual creator ID\n    // For now, we'll simulate by reading from contract\n    const creatorId = await this.readContract(contract, \"getCreatorByWallet\", [creatorWallet]);\n    return Number(creatorId);\n  }\n\n  /**\n   * Prepare a creator addition transaction for external execution\n   * This method returns the prepared transaction without executing it,\n   * allowing the calling application to handle wallet interaction\n   */\n  async prepareAddCreatorTransaction(registration: CreatorRegistration): Promise<{\n    transaction: any;\n    contractAddress: string;\n    chainId: number;\n  }> {\n    const chainId = registration.chainId || SUPPORTED_CHAINS.BASE;\n    const contractAddress = this.getContractAddress(chainId);\n    \n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported for creator registration or contract not deployed`);\n    }\n\n    const chain = this.getChainById(chainId);\n    // @ts-ignore: Suppress type mismatch for ABI\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const transaction = prepareContractCall({\n      contract,\n      method: \"function addCreator(address creatorWallet, uint8 tier, string thirdwebId)\",\n      params: [\n        registration.creatorWallet, \n        registration.tier, \n        registration.thirdwebId || \"\"\n      ],\n    });\n\n    return {\n      transaction,\n      contractAddress,\n      chainId\n    };\n  }\n\n  async getCreator(creatorId: number, chainId: number): Promise<Creator> {\n    const contractAddress = this.getContractAddress(chainId);\n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported or contract not deployed`);\n    }\n\n    const chain = this.getChainById(chainId);\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const creatorInfo = await this.readContract(contract, \"function getCreatorInfo(uint256 creatorId) view returns (address wallet, bool active, uint256 totalTips, uint256 tipCount, uint8 tier, uint256 creatorShareBps)\", [BigInt(creatorId)]) as [string, boolean, bigint, bigint, number, bigint];\n    \n    return {\n      id: creatorId,\n      wallet: creatorInfo[0], // wallet\n      active: creatorInfo[1], // active\n      totalTips: creatorInfo[2].toString(), // totalTips\n      tipCount: Number(creatorInfo[3]), // tipCount\n      tier: creatorInfo[4] as MembershipTier, // tier\n      creatorShareBps: Number(creatorInfo[5]) // creatorShareBps\n    };\n  }\n\n  async getCreatorByWallet(walletAddress: string, chainId: number): Promise<Creator | null> {\n    const contractAddress = this.getContractAddress(chainId);\n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported or contract not deployed`);\n    }\n\n    const chain = this.getChainById(chainId);\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const creatorId = await this.readContract(contract, \"getCreatorByWallet\", [walletAddress]);\n    \n    if (Number(creatorId) === 0) {\n      return null; // Creator not found\n    }\n\n    return this.getCreator(Number(creatorId), chainId);\n  }\n\n  /**\n   * Get creator by thirdweb account ID\n   * @param thirdwebId Thirdweb account ID\n   * @param chainId Chain ID\n   * @returns Creator information or null if not found\n   */\n  async getCreatorByThirdwebId(thirdwebId: string, chainId: number): Promise<Creator | null> {\n    const contractAddress = this.getContractAddress(chainId);\n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported or contract not deployed`);\n    }\n\n    const chain = this.getChainById(chainId);\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const creatorId = await this.readContract(contract, \"getCreatorByThirdwebId\", [thirdwebId]);\n    \n    if (Number(creatorId) === 0) {\n      return null; // Creator not found\n    }\n\n    return this.getCreator(Number(creatorId), chainId);\n  }\n\n  async updateCreatorWallet(creatorId: number, newWallet: string, chainId: number): Promise<boolean> {\n    const contractAddress = this.getContractAddress(chainId);\n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported or contract not deployed`);\n    }\n\n    const chain = this.getChainById(chainId);\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const transaction = prepareContractCall({\n      contract,\n      method: \"function updateCreatorWallet(uint256 creatorId, address newWallet)\",\n      params: [BigInt(creatorId), newWallet],\n    });\n\n    const result = await this.executeTransaction(transaction);\n    return (result as any).success;\n  }\n\n  async updateCreatorTier(creatorId: number, newTier: MembershipTier, chainId: number): Promise<boolean> {\n    const contractAddress = this.getContractAddress(chainId);\n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported or contract not deployed`);\n    }\n\n    const chain = this.getChainById(chainId);\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const transaction = prepareContractCall({\n      contract,\n      method: \"function updateCreatorTier(uint256 creatorId, uint8 newTier)\",\n      params: [BigInt(creatorId), newTier],\n    });\n\n    const result = await this.executeTransaction(transaction);\n    return (result as any).success;\n  }\n\n  async calculateTipSplits(creatorId: number, tipAmount: string, chainId: number): Promise<TipSplits> {\n    const contractAddress = this.getContractAddress(chainId);\n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported or contract not deployed`);\n    }\n\n    const chain = this.getChainById(chainId);\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const result = await this.readContract(\n      contract, \n      \"function calculateTipSplits(uint256 creatorId, uint256 tipAmount) view returns (uint256 platformFee, uint256 creatorAmount, uint256 businessAmount)\", \n      [BigInt(creatorId), BigInt(tipAmount)]\n    ) as [bigint, bigint, bigint];\n\n    return {\n      platformFee: result[0].toString(),\n      creatorAmount: result[1].toString(),\n      businessAmount: result[2].toString()\n    };\n  }\n\n  async getCreatorUsdcBalanceOnApeChain(creatorAddress: string): Promise<string> {\n    const apeChainAddress = this.getContractAddress(SUPPORTED_CHAINS.APECHAIN);\n    if (!apeChainAddress) {\n      throw new Error('ApeChain contract not deployed or configured');\n    }\n\n      const chain = this.getChainById(SUPPORTED_CHAINS.APECHAIN);\n    // @ts-ignore: Suppress type mismatch for ABI\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: apeChainAddress,\n      abi: TypedABI,\n    });\n\n    const balances = await this.readContract(contract, \"getBalances\", [creatorAddress]) as [bigint, bigint];\n    return balances[1].toString(); // usdcBalance is the second return value\n  }\n\n  async getPlatformStats(chainId: number): Promise<PlatformStats> {\n    const contractAddress = this.getContractAddress(chainId);\n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported or contract not deployed`);\n    }\n\n    const chain = this.getChainById(chainId);\n    // @ts-ignore: Suppress type mismatch for ABI\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const stats = await this.readContract(contract, \"getPlatformStats\", []) as [bigint, bigint, bigint, bigint, boolean];\n    \n    return {\n      totalTips: stats[0].toString(),\n      totalCount: Number(stats[1]),\n      totalRelayed: stats[2].toString(),\n      activeCreators: Number(stats[3]),\n      autoRelayEnabled: stats[4]\n    };\n  }\n\n  async getTopCreators(limit: number = 10, chainId: number): Promise<Creator[]> {\n    const contractAddress = this.getContractAddress(chainId);\n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported or contract not deployed`);\n    }\n\n    const chain = this.getChainById(chainId);\n    // @ts-ignore: Suppress type mismatch for ABI\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    // Fetch all active creators (limit to reasonable number for performance)\n    const maxCreators = Math.max(limit * 2, 100); // Get more than requested to enable proper sorting\n    const result = await this.readContract(\n      contract, \n      \"getAllActiveCreators\", \n      [BigInt(maxCreators)]\n    ) as [bigint[], string[]];\n    \n    const [creatorIds, wallets] = result;\n    const allCreators: Creator[] = [];\n    \n    // Create creator objects - we'll fetch tip data for sorting below\n    for (let i = 0; i < creatorIds.length; i++) {\n      allCreators.push({\n        id: Number(creatorIds[i]),\n        wallet: wallets[i],\n        active: true, // getAllActiveCreators only returns active creators\n        totalTips: \"0\", // Will be fetched below\n        tipCount: 0 // Will be fetched below\n      });\n    }\n    \n    // Fetch tip data for proper sorting (for first few creators only to optimize performance)\n    const creatorsToEnrich = allCreators.slice(0, Math.min(limit * 3, allCreators.length));\n    \n    for (const creator of creatorsToEnrich) {\n      try {\n        // Try to get creator info for totalTips\n        const creatorInfo = await this.readContract(\n          contract,\n          \"function getCreatorInfo(uint256 creatorId) view returns (address wallet, bool active, uint256 totalTips, uint256 tipCount, uint8 tier, uint256 creatorShareBps)\", \n          [BigInt(creator.id)]\n        ) as [string, boolean, bigint, bigint, number, bigint];\n        \n        creator.totalTips = creatorInfo[2].toString(); // Total tips received\n        creator.tipCount = Number(creatorInfo[3]); // Tip count\n      } catch (error) {\n        // If getCreatorInfo is not available, keep defaults\n        console.warn(`Failed to get creator info for ID ${creator.id}:`, error);\n      }\n    }\n    \n    // Sort by totalTips descending (using bigint comparison for accuracy)\n    allCreators.sort((a, b) => {\n      const aTips = BigInt(a.totalTips);\n      const bTips = BigInt(b.totalTips);\n      \n      if (bTips > aTips) return 1;\n      if (bTips < aTips) return -1;\n      return 0;\n    });\n    \n    // Take top N creators\n    const topCreators = allCreators.slice(0, limit);\n    \n    return topCreators;\n  }\n\n  private getChainById(chainId: number): Chain {\n    // Chain objects are now imported at the top of the file\n    \n    const chainMap: Record<number, Chain> = {\n      // Mainnet chains\n      1: ethereum,\n      137: polygon,\n      10: optimism,\n      56: bsc,\n      43114: avalanche,\n      8453: base,\n      42161: arbitrum,\n      2741: defineChain({\n        id: 2741,\n        name: 'Abstract',\n        rpc: 'https://api.testnet.abs.xyz',\n        nativeCurrency: {\n          name: 'Ethereum',\n          symbol: 'ETH',\n          decimals: 18,\n        },\n      }),\n      33139: defineChain({\n        id: 33139,\n        name: 'ApeChain',\n        rpc: 'https://33139.rpc.thirdweb.com',\n        nativeCurrency: {\n          name: 'APE',\n          symbol: 'APE',\n          decimals: 18,\n        },\n      }),\n      167000: defineChain({\n        id: 167000,\n        name: 'Taiko',\n        rpc: 'https://rpc.mainnet.taiko.xyz',\n        nativeCurrency: {\n          name: 'Ethereum',\n          symbol: 'ETH',\n          decimals: 18,\n        },\n      }),\n      // Testnets\n      17000: defineChain({\n        id: 17000,\n        name: 'Ethereum Holesky',\n        rpc: 'https://ethereum-holesky-rpc.publicnode.com',\n        nativeCurrency: {\n          name: 'Ethereum',\n          symbol: 'ETH',\n          decimals: 18,\n        },\n      }),\n      80002: defineChain({\n        id: 80002,\n        name: 'Polygon Amoy',\n        rpc: 'https://rpc-amoy.polygon.technology',\n        nativeCurrency: {\n          name: 'MATIC',\n          symbol: 'MATIC',\n          decimals: 18,\n        },\n      }),\n      33111: defineChain({\n        id: 33111,\n        name: 'ApeChain Curtis (Testnet)',\n        rpc: 'https://curtis.rpc.caldera.xyz/http',\n        nativeCurrency: {\n          name: 'APE',\n          symbol: 'APE',\n          decimals: 18,\n        },\n      }),\n    };\n    \n    const chain = chainMap[chainId];\n    if (!chain) {\n      throw new Error(`Unsupported chain ID: ${chainId}`);\n    }\n    \n    return chain;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  private async executeTransaction(_transaction: unknown): Promise<Record<string, unknown>> {\n    // This method should be called with a connected wallet\n    // For now, we'll return a mock response indicating the transaction needs to be executed\n    // In a real implementation, this would use the thirdweb SDK to execute the transaction\n    return {\n      transactionHash: '0x' + Math.random().toString(16).substr(2, 64),\n      blockNumber: Math.floor(Math.random() * 1000000),\n      success: true,\n    };\n  }\n\n  private async readContract(contract: unknown, method: string, params: unknown[]): Promise<unknown> {\n    try {\n      // Use thirdweb's readContract function\n      const result = await readContract({\n        contract: contract as any,\n        method,\n        params,\n      });\n      return result;\n    } catch (error) {\n      throw new Error(`Failed to read contract: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  // ============ Viewer Rewards Methods ============\n  \n  /**\n   * Register a new viewer with optional thirdweb ID\n   * @param registration Viewer registration parameters\n   * @returns The assigned viewer ID\n   */\n  async registerViewer(registration: ViewerRegistration): Promise<number> {\n    const chainId = registration.chainId || SUPPORTED_CHAINS.POLYGON;\n    const contractAddress = this.getContractAddress(chainId);\n    \n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported`);\n    }\n\n    const chain = this.getChainById(chainId);\n    // @ts-ignore: Suppress type mismatch for ABI\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const transaction = prepareContractCall({\n      contract,\n      method: \"function registerViewer(address viewerWallet, string thirdwebId)\",\n      params: [registration.walletAddress, registration.thirdwebId || \"\"],\n    });\n\n    const result = await this.executeTransaction(transaction);\n    \n    // In production, parse the ViewerRegistered event to get the actual viewer ID\n    // For now, we'll simulate by reading from contract\n    const viewerId = await this.readContract(contract, \"getViewerByWallet\", [registration.walletAddress]);\n    return Number(viewerId);\n  }\n\n  /**\n   * Send a reward to a viewer\n   * @param params Viewer reward parameters\n   * @returns Transaction result\n   */\n  async rewardViewer(params: ViewerRewardParams): Promise<ViewerRewardResult> {\n    const chainId = params.chainId || SUPPORTED_CHAINS.POLYGON;\n    const contractAddress = this.getContractAddress(chainId);\n    \n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported`);\n    }\n\n    const chain = this.getChainById(chainId);\n    // @ts-ignore: Suppress type mismatch for ABI\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    try {\n      let transaction;\n      const amountBigInt = BigInt(params.amount);\n      \n      // Calculate fees\n      const platformFee = (amountBigInt * BigInt(100)) / BigInt(10000); // 1%\n      const viewerAmount = amountBigInt - platformFee;\n      \n      // Get USDC conversion estimate via relay service\n      const relayQuote = await this.relayService.getQuote({\n        fromChainId: chainId,\n        fromToken: params.token === 'native' ? 'native' : (params.token || 'native'),\n        toChainId: SUPPORTED_CHAINS.APECHAIN,\n        toToken: 'USDC',\n        amount: viewerAmount.toString()\n      });\n      \n      const estimatedUsdcAmount = relayQuote.estimatedOutput;\n      \n      // Determine which reward method to use based on identifier type\n      if (params.viewerId) {\n        // Use viewer ID directly\n        if (params.token === 'native' || !params.token) {\n          transaction = prepareContractCall({\n            contract,\n            method: \"function rewardViewerByIdETH(uint256 viewerId, string reason)\",\n            params: [BigInt(params.viewerId), params.reason || \"\"],\n            value: amountBigInt\n          });\n        } else {\n          throw new Error(\"Token rewards by ID not yet implemented\");\n        }\n      } else if (params.thirdwebId) {\n        // Resolve thirdweb ID to viewer ID first\n        const viewerId = await this.readContract(contract, \"getViewerByThirdwebId\", [params.thirdwebId]);\n        if (Number(viewerId) === 0) {\n          throw new Error(`No viewer found for thirdweb ID: ${params.thirdwebId}`);\n        }\n        \n        if (params.token === 'native' || !params.token) {\n          transaction = prepareContractCall({\n            contract,\n            method: \"function rewardViewerByIdETH(uint256 viewerId, string reason)\",\n            params: [BigInt(Number(viewerId)), params.reason || \"\"],\n            value: amountBigInt\n          });\n        } else {\n          throw new Error(\"Token rewards by ID not yet implemented\");\n        }\n      } else if (params.viewerAddress) {\n        // Direct address (existing flow)\n        if (params.token === 'native' || !params.token) {\n          transaction = prepareContractCall({\n            contract,\n            method: \"function rewardViewerETH(address viewer, string reason)\",\n            params: [params.viewerAddress, params.reason || \"\"],\n            value: amountBigInt\n          });\n        } else {\n          // ERC20 token reward\n          await this.approveTokenIfNeeded(params.token, contractAddress, params.amount, chainId);\n          \n          transaction = prepareContractCall({\n            contract,\n            method: \"function rewardViewerToken(address viewer, address token, uint256 amount, string reason)\",\n            params: [params.viewerAddress, params.token, amountBigInt, params.reason || \"\"]\n          });\n        }\n      } else {\n        throw new Error('Must provide viewerId, thirdwebId, or viewerAddress');\n      }\n\n      const result = await this.executeTransaction(transaction);\n      \n      return {\n        success: true,\n        transactionHash: result.transactionHash as string,\n        chainId,\n        viewerAmount: viewerAmount.toString(),\n        platformFee: platformFee.toString(),\n        estimatedUsdcAmount,\n        destinationChain: SUPPORTED_CHAINS.APECHAIN\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Batch reward multiple viewers (gas efficient)\n   * @param params Batch viewer reward parameters\n   * @returns Transaction result\n   */\n  async batchRewardViewers(params: BatchViewerRewardParams): Promise<ViewerRewardResult> {\n    const chainId = params.chainId || SUPPORTED_CHAINS.POLYGON;\n    const contractAddress = this.getContractAddress(chainId);\n    \n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported`);\n    }\n\n    if (params.viewers.length > 50) {\n      throw new Error(\"Too many viewers in batch (max 50)\");\n    }\n\n    if (params.viewers.length === 0) {\n      throw new Error(\"No viewers provided\");\n    }\n\n    const chain = this.getChainById(chainId);\n    // @ts-ignore: Suppress type mismatch for ABI\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    // Resolve all viewer identifiers to IDs or addresses\n    const resolvedViewers: Array<{ isId: boolean; identifier: string | bigint }> = [];\n    const amounts = params.viewers.map(v => BigInt(v.amount));\n    const reasons = params.viewers.map(v => v.reason || \"\");\n    const totalAmount = amounts.reduce((sum, amount) => sum + amount, BigInt(0));\n    \n    // Resolve each viewer to either an ID or address\n    for (const viewer of params.viewers) {\n      if (viewer.viewerId) {\n        resolvedViewers.push({ isId: true, identifier: BigInt(viewer.viewerId) });\n      } else if (viewer.thirdwebId) {\n        const viewerId = await this.readContract(\n          contract,\n          \"getViewerByThirdwebId\",\n          [viewer.thirdwebId]\n        ) as bigint;\n        if (viewerId === BigInt(0)) {\n          throw new Error(`No viewer found for thirdweb ID: ${viewer.thirdwebId}`);\n        }\n        resolvedViewers.push({ isId: true, identifier: viewerId });\n      } else if (viewer.address) {\n        resolvedViewers.push({ isId: false, identifier: viewer.address });\n      } else {\n        throw new Error('Each viewer must have viewerId, thirdwebId, or address');\n      }\n    }\n    \n    // Check if all are IDs or all are addresses\n    const allIds = resolvedViewers.every(v => v.isId);\n    const allAddresses = resolvedViewers.every(v => !v.isId);\n    \n    if (!allIds && !allAddresses) {\n      throw new Error('Cannot mix viewer IDs and addresses in batch rewards');\n    }\n\n    try {\n      let transaction;\n      \n      if (allIds) {\n        // Use batch reward by IDs\n        const viewerIds = resolvedViewers.map(v => v.identifier as bigint);\n        transaction = prepareContractCall({\n          contract,\n          method: \"function batchRewardViewersByIdETH(uint256[] viewerIds, uint256[] amounts, string[] reasons)\",\n          params: [viewerIds, amounts, reasons],\n          value: totalAmount\n        });\n      } else {\n        // Use batch reward by addresses\n        const viewerAddresses = resolvedViewers.map(v => v.identifier as string);\n        transaction = prepareContractCall({\n          contract,\n          method: \"function batchRewardViewersETH(address[] viewers, uint256[] amounts, string[] reasons)\",\n          params: [viewerAddresses, amounts, reasons],\n          value: totalAmount\n        });\n      }\n\n      const result = await this.executeTransaction(transaction);\n      \n      // Calculate total fees\n      const totalFee = (totalAmount * BigInt(100)) / BigInt(10000); // 1%\n      const totalToViewers = totalAmount - totalFee;\n      \n      // Get USDC conversion estimate for batch\n      const relayQuote = await this.relayService.getQuote({\n        fromChainId: chainId,\n        fromToken: 'native',\n        toChainId: SUPPORTED_CHAINS.APECHAIN,\n        toToken: 'USDC',\n        amount: totalToViewers.toString()\n      });\n      \n      const estimatedUsdcAmount = relayQuote.estimatedOutput;\n      \n      return {\n        success: true,\n        transactionHash: result.transactionHash as string,\n        chainId,\n        viewerAmount: totalToViewers.toString(),\n        platformFee: totalFee.toString(),\n        estimatedUsdcAmount,\n        destinationChain: SUPPORTED_CHAINS.APECHAIN\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Get viewer reward statistics for an address\n   * @param address Address to check (can be creator or viewer)\n   * @param chainId Chain ID\n   * @returns Viewer reward statistics\n   */\n  async getViewerRewardStats(address: string, chainId: number): Promise<ViewerRewardStats> {\n    const contractAddress = this.getContractAddress(chainId);\n    \n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported`);\n    }\n\n    const chain = this.getChainById(chainId);\n    // @ts-ignore: Suppress type mismatch for ABI\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const result = await this.readContract(contract, \"getViewerRewardStats\", [address]) as [bigint, bigint, bigint];\n\n    return {\n      totalRewardsGiven: result[0].toString(),\n      totalRewardsReceived: result[1].toString(),\n      rewardCount: Number(result[2])\n    };\n  }\n\n  /**\n   * Check if viewer rewards are enabled on a chain\n   * @param chainId Chain ID\n   * @returns Whether viewer rewards are enabled\n   */\n  async areViewerRewardsEnabled(chainId: number): Promise<boolean> {\n    const contractAddress = this.getContractAddress(chainId);\n    \n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported`);\n    }\n\n    const chain = this.getChainById(chainId);\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    return await this.readContract(contract, \"viewerRewardsEnabled\", []) as boolean;\n  }\n\n  /**\n   * Get platform-wide viewer rewards statistics\n   * @param chainId Chain ID\n   * @returns Platform viewer rewards statistics\n   */\n  async getViewerRewardsPlatformStats(chainId: number): Promise<ViewerRewardsPlatformStats> {\n    const contractAddress = this.getContractAddress(chainId);\n    \n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported`);\n    }\n\n    const chain = this.getChainById(chainId);\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const result = await this.readContract(contract, \"getViewerRewardsPlatformStats\", []) as [bigint, boolean, bigint];\n\n    return {\n      totalRewards: result[0].toString(),\n      rewardsEnabled: result[1],\n      platformFeeRate: Number(result[2])\n    };\n  }\n\n  /**\n   * Get viewer information by ID\n   * @param viewerId Viewer's unique ID\n   * @param chainId Chain ID\n   * @returns Viewer information\n   */\n  async getViewer(viewerId: number, chainId: number): Promise<ViewerInfo | null> {\n    const contractAddress = this.getContractAddress(chainId);\n    \n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported`);\n    }\n\n    const chain = this.getChainById(chainId);\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const result = await this.readContract(contract, \"getViewerInfo\", [BigInt(viewerId)]) as [string, bigint];\n    const [wallet, totalReceived] = result;\n    \n    if (wallet === '0x0000000000000000000000000000000000000000') {\n      return null;\n    }\n\n    return {\n      id: viewerId,\n      wallet,\n      totalReceived: totalReceived.toString()\n    };\n  }\n\n  /**\n   * Get viewer by wallet address\n   * @param walletAddress Wallet address\n   * @param chainId Chain ID\n   * @returns Viewer information or null if not found\n   */\n  async getViewerByWallet(walletAddress: string, chainId: number): Promise<ViewerInfo | null> {\n    const contractAddress = this.getContractAddress(chainId);\n    \n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported`);\n    }\n\n    const chain = this.getChainById(chainId);\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const viewerId = await this.readContract(contract, \"getViewerByWallet\", [walletAddress]) as bigint;\n    \n    if (viewerId === BigInt(0)) {\n      return null;\n    }\n\n    return this.getViewer(Number(viewerId), chainId);\n  }\n\n  /**\n   * Get viewer by thirdweb ID\n   * @param thirdwebId Thirdweb account ID\n   * @param chainId Chain ID\n   * @returns Viewer information or null if not found\n   */\n  async getViewerByThirdwebId(thirdwebId: string, chainId: number): Promise<ViewerInfo | null> {\n    const contractAddress = this.getContractAddress(chainId);\n    \n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported`);\n    }\n\n    const chain = this.getChainById(chainId);\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const viewerId = await this.readContract(contract, \"getViewerByThirdwebId\", [thirdwebId]) as bigint;\n    \n    if (viewerId === BigInt(0)) {\n      return null;\n    }\n\n    const viewer = await this.getViewer(Number(viewerId), chainId);\n    if (viewer) {\n      viewer.thirdwebId = thirdwebId;\n    }\n    return viewer;\n  }\n\n  /**\n   * Update viewer wallet address\n   * @param viewerId Viewer's unique ID\n   * @param newWallet New wallet address\n   * @param chainId Chain ID\n   * @returns Success status\n   */\n  async updateViewerWallet(viewerId: number, newWallet: string, chainId: number): Promise<boolean> {\n    const contractAddress = this.getContractAddress(chainId);\n    \n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported`);\n    }\n\n    const chain = this.getChainById(chainId);\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const transaction = prepareContractCall({\n      contract,\n      method: \"function updateViewerWallet(uint256 viewerId, address newWallet)\",\n      params: [BigInt(viewerId), newWallet],\n    });\n\n    const result = await this.executeTransaction(transaction);\n    return (result as any).success;\n  }\n\n  /**\n   * Get viewer's USDC balance on ApeChain\n   * @param viewerAddress Address of the viewer\n   * @returns USDC balance on ApeChain\n   */\n  async getViewerUsdcBalanceOnApeChain(viewerAddress: string): Promise<string> {\n    const apeChainAddress = this.getContractAddress(SUPPORTED_CHAINS.APECHAIN);\n    if (!apeChainAddress) {\n      throw new Error('ApeChain contract not deployed or configured');\n    }\n\n    const contract = getContract({\n      client: this.client,\n      chain: this.getChainById(SUPPORTED_CHAINS.APECHAIN),\n      address: apeChainAddress,\n    });\n\n    // On ApeChain, check USDC balance for viewer\n    const balances = await this.readContract(contract, \"getBalances\", [viewerAddress]) as [bigint, bigint];\n    return balances[1].toString(); // usdcBalance is the second return value\n  }\n\n  /**\n   * Helper method to approve token spending if needed\n   * @private\n   */\n  /**\n   * Create a reward pool and distribute equally among viewers\n   * @param params Pool parameters\n   * @returns Pool distribution result\n   */\n  async createRewardPool(params: RewardPoolParams): Promise<RewardPoolResult> {\n    const chainId = params.chainId || SUPPORTED_CHAINS.POLYGON;\n    const { totalAmount, viewerAddresses, reason = \"Reward pool distribution\" } = params;\n\n    // Validate inputs\n    if (!viewerAddresses || viewerAddresses.length === 0) {\n      return {\n        success: false,\n        error: \"No viewer addresses provided\",\n        totalDistributed: \"0\",\n        platformFee: \"0\",\n        perViewerAmount: \"0\",\n        viewerCount: 0,\n        transactions: []\n      };\n    }\n\n    // Remove duplicates and validate addresses\n    const uniqueViewers = [...new Set(viewerAddresses)].filter((addr): addr is string => \n      typeof addr === 'string' && addr.startsWith('0x') && addr.length === 42\n    );\n\n    if (uniqueViewers.length === 0) {\n      return {\n        success: false,\n        error: \"No valid viewer addresses found\",\n        totalDistributed: \"0\",\n        platformFee: \"0\",\n        perViewerAmount: \"0\", \n        viewerCount: 0,\n        transactions: []\n      };\n    }\n\n    try {\n      // Calculate distribution\n      const calculation = this.calculateRewardPoolDistribution(totalAmount, uniqueViewers.length);\n      \n      // Create viewer reward params\n      const viewers = uniqueViewers.map(address => ({\n        address,\n        amount: calculation.perViewerAmount,\n        reason\n      }));\n\n      // Split into batches of 50 (contract limit)\n      const batches: Array<typeof viewers> = [];\n      for (let i = 0; i < viewers.length; i += 50) {\n        batches.push(viewers.slice(i, i + 50));\n      }\n\n      // Execute all batches\n      const transactions: string[] = [];\n      let allSuccess = true;\n\n      for (let i = 0; i < batches.length; i++) {\n        const batch = batches[i];\n        const result = await this.batchRewardViewers({\n          viewers: batch,\n          chainId\n        });\n\n        if (result.success && result.transactionHash) {\n          transactions.push(result.transactionHash);\n        } else {\n          allSuccess = false;\n          console.error(`Batch ${i + 1} failed:`, result.error);\n        }\n      }\n\n      // Estimate USDC per viewer (rough estimate - actual may vary based on exchange rates)\n      const estimatedUsdcPerViewer = await this.estimateUsdcAmount(\n        calculation.perViewerAmount,\n        chainId\n      );\n\n      return {\n        success: allSuccess,\n        totalDistributed: calculation.distributableAmount,\n        platformFee: calculation.platformFee,\n        perViewerAmount: calculation.perViewerAmount,\n        viewerCount: uniqueViewers.length,\n        transactions,\n        estimatedUsdcPerViewer,\n        error: allSuccess ? undefined : \"Some batches failed to process\"\n      };\n    } catch (error: any) {\n      return {\n        success: false,\n        error: error.message || \"Failed to create reward pool\",\n        totalDistributed: \"0\",\n        platformFee: \"0\",\n        perViewerAmount: \"0\",\n        viewerCount: 0,\n        transactions: []\n      };\n    }\n  }\n\n  /**\n   * Calculate reward pool distribution\n   * @param totalAmount Total amount to distribute\n   * @param viewerCount Number of viewers\n   * @returns Distribution calculation\n   */\n  calculateRewardPoolDistribution(totalAmount: string, viewerCount: number): RewardPoolCalculation {\n    const total = BigInt(totalAmount);\n    const platformFee = total * 100n / 10000n; // 1% platform fee\n    const distributableAmount = total - platformFee;\n    const perViewerAmount = distributableAmount / BigInt(viewerCount);\n    const batchCount = Math.ceil(viewerCount / 50);\n\n    return {\n      totalAmount: total.toString(),\n      platformFee: platformFee.toString(),\n      distributableAmount: distributableAmount.toString(),\n      perViewerAmount: perViewerAmount.toString(),\n      viewerCount,\n      batchCount\n    };\n  }\n\n  /**\n   * Estimate USDC amount for a given native token amount\n   * This is a rough estimate - actual conversion depends on current rates\n   */\n  private async estimateUsdcAmount(nativeAmount: string, chainId: number): Promise<string> {\n    // Rough estimates based on typical rates (in production, use price oracles)\n    const estimateRates: Record<number, number> = {\n      1: 2000,      // ETH ~$2000\n      137: 0.8,     // MATIC ~$0.80\n      10: 2000,     // ETH on Optimism\n      56: 300,      // BNB ~$300\n      2741: 2000,   // ETH on Abstract\n      43114: 30,    // AVAX ~$30\n      8453: 2000,   // ETH on Base\n      42161: 2000,  // ETH on Arbitrum\n      167000: 2000, // ETH on Taiko\n      // Testnets (same rates as mainnet for estimation)\n      17000: 2000,  // ETH on Holesky\n      80002: 0.8,   // MATIC on Amoy\n      33111: 1      // APE on Curtis testnet\n    };\n\n    const rate = estimateRates[chainId] || 1;\n    const amount = parseFloat(nativeAmount) / 1e18; // Convert from wei\n    const usdcAmount = (amount * rate * 1e6).toFixed(0); // Convert to USDC decimals (6)\n    \n    return usdcAmount;\n  }\n\n  private async approveTokenIfNeeded(\n    tokenAddress: string,\n    spenderAddress: string,\n    amount: string,\n    chainId: number\n  ): Promise<void> {\n    const chain = this.getChainById(chainId);\n    const tokenContract = getContract({\n      client: this.client,\n      chain,\n      address: tokenAddress,\n    });\n\n    // Check current allowance\n    const allowance = await this.readContract(\n      tokenContract,\n      \"allowance\",\n      [/* owner address would go here */, spenderAddress]\n    ) as bigint;\n\n    if (allowance < BigInt(amount)) {\n      // Approve the required amount\n      const approveTx = prepareContractCall({\n        contract: tokenContract,\n        method: \"function approve(address spender, uint256 amount)\",\n        params: [spenderAddress, BigInt(amount)]\n      });\n\n      await this.executeTransaction(approveTx);\n    }\n  }\n\n  /**\n   * Get contract owner address\n   */\n  async getOwner(chainId: number): Promise<string> {\n    const contractAddress = this.getContractAddress(chainId);\n    if (!contractAddress) {\n      throw new Error(`No contract address for chain ${chainId}`);\n    }\n\n    const chain = this.getChainById(chainId);\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    return await this.readContract(contract, \"owner\", []) as string;\n  }\n\n  /**\n   * Get business owner address\n   */\n  async getBusinessOwner(chainId: number): Promise<string> {\n    const contractAddress = this.getContractAddress(chainId);\n    if (!contractAddress) {\n      throw new Error(`No contract address for chain ${chainId}`);\n    }\n\n    const chain = this.getChainById(chainId);\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    return await this.readContract(contract, \"businessOwner\", []) as string;\n  }\n\n  /**\n   * Check if address is the contract owner\n   */\n  async isOwner(chainId: number, address: string): Promise<boolean> {\n    const owner = await this.getOwner(chainId);\n    return owner.toLowerCase() === address.toLowerCase();\n  }\n\n  // ============ Admin Role Management ============\n\n  /**\n   * Grant admin privileges to an address on a specific chain\n   * @param adminAddress Address to grant admin role\n   * @param chainId Chain ID\n   * @returns True if successful\n   */\n  async grantAdmin(adminAddress: string, chainId: number): Promise<boolean> {\n    const contractAddress = this.getContractAddress(chainId);\n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported or contract not deployed`);\n    }\n\n    const chain = this.getChainById(chainId);\n    // @ts-ignore: Suppress type mismatch for ABI\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const transaction = prepareContractCall({\n      contract,\n      method: \"function grantAdmin(address admin)\",\n      params: [adminAddress],\n    });\n\n    const result = await this.executeTransaction(transaction);\n    return (result as any).success;\n  }\n\n  /**\n   * Revoke admin privileges from an address on a specific chain\n   * @param adminAddress Address to revoke admin role\n   * @param chainId Chain ID\n   * @returns True if successful\n   */\n  async revokeAdmin(adminAddress: string, chainId: number): Promise<boolean> {\n    const contractAddress = this.getContractAddress(chainId);\n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported or contract not deployed`);\n    }\n\n    const chain = this.getChainById(chainId);\n    // @ts-ignore: Suppress type mismatch for ABI\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const transaction = prepareContractCall({\n      contract,\n      method: \"function revokeAdmin(address admin)\",\n      params: [adminAddress],\n    });\n\n    const result = await this.executeTransaction(transaction);\n    return (result as any).success;\n  }\n\n  /**\n   * Check if an address has admin privileges on a specific chain\n   * @param adminAddress Address to check\n   * @param chainId Chain ID\n   * @returns True if address is admin\n   */\n  async isAdmin(adminAddress: string, chainId: number): Promise<boolean> {\n    const contractAddress = this.getContractAddress(chainId);\n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported or contract not deployed`);\n    }\n\n    const chain = this.getChainById(chainId);\n    // @ts-ignore: Suppress type mismatch for ABI\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    return await this.readContract(contract, \"isAdmin\", [adminAddress]) as boolean;\n  }\n\n  /**\n   * Add an authorized relayer for cross-chain operations\n   * @param relayerAddress Address of the relayer to authorize\n   * @param chainId Chain ID\n   * @returns True if successful\n   */\n  async addAuthorizedRelayer(relayerAddress: string, chainId: number): Promise<boolean> {\n    const contractAddress = this.getContractAddress(chainId);\n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported or contract not deployed`);\n    }\n\n    const chain = this.getChainById(chainId);\n    // @ts-ignore: Suppress type mismatch for ABI\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const transaction = prepareContractCall({\n      contract,\n      method: \"function addAuthorizedRelayer(address relayer)\",\n      params: [relayerAddress],\n    });\n\n    const result = await this.executeTransaction(transaction);\n    return (result as any).success;\n  }\n\n  /**\n   * Remove an authorized relayer for cross-chain operations\n   * @param relayerAddress Address of the relayer to remove\n   * @param chainId Chain ID\n   * @returns True if successful\n   */\n  async removeAuthorizedRelayer(relayerAddress: string, chainId: number): Promise<boolean> {\n    const contractAddress = this.getContractAddress(chainId);\n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported or contract not deployed`);\n    }\n\n    const chain = this.getChainById(chainId);\n    // @ts-ignore: Suppress type mismatch for ABI\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const transaction = prepareContractCall({\n      contract,\n      method: \"function removeAuthorizedRelayer(address relayer)\",\n      params: [relayerAddress],\n    });\n\n    const result = await this.executeTransaction(transaction);\n    return (result as any).success;\n  }\n\n  /**\n   * Set whether viewer rewards are enabled on a chain\n   * @param enabled True to enable viewer rewards, false to disable\n   * @param chainId Chain ID\n   * @returns True if successful\n   */\n  async setViewerRewardsEnabled(enabled: boolean, chainId: number): Promise<boolean> {\n    const contractAddress = this.getContractAddress(chainId);\n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported or contract not deployed`);\n    }\n\n    const chain = this.getChainById(chainId);\n    // @ts-ignore: Suppress type mismatch for ABI\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const transaction = prepareContractCall({\n      contract,\n      method: \"function setViewerRewardsEnabled(bool enabled)\",\n      params: [enabled],\n    });\n\n    const result = await this.executeTransaction(transaction);\n    return (result as any).success;\n  }\n\n  // ============ Contract State Management ============\n\n  /**\n   * Pause the contract operations (admin only)\n   * @param chainId Chain ID\n   * @returns True if successful\n   */\n  async pause(chainId: number): Promise<boolean> {\n    const contractAddress = this.getContractAddress(chainId);\n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported or contract not deployed`);\n    }\n\n    const chain = this.getChainById(chainId);\n    // @ts-ignore: Suppress type mismatch for ABI\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const transaction = prepareContractCall({\n      contract,\n      method: \"function pause()\",\n      params: [],\n    });\n\n    const result = await this.executeTransaction(transaction);\n    return (result as any).success;\n  }\n\n  /**\n   * Unpause the contract operations (admin only)\n   * @param chainId Chain ID\n   * @returns True if successful\n   */\n  async unpause(chainId: number): Promise<boolean> {\n    const contractAddress = this.getContractAddress(chainId);\n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported or contract not deployed`);\n    }\n\n    const chain = this.getChainById(chainId);\n    // @ts-ignore: Suppress type mismatch for ABI\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const transaction = prepareContractCall({\n      contract,\n      method: \"function unpause()\",\n      params: [],\n    });\n\n    const result = await this.executeTransaction(transaction);\n    return (result as any).success;\n  }\n\n  // ============ Emergency Withdrawal ============\n\n  /**\n   * Perform an emergency withdrawal of funds (admin only)\n   * @param chainId Chain ID\n   * @returns True if successful\n   */\n  async emergencyWithdraw(chainId: number): Promise<boolean> {\n    const contractAddress = this.getContractAddress(chainId);\n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported or contract not deployed`);\n    }\n\n    const chain = this.getChainById(chainId);\n    // @ts-ignore: Suppress type mismatch for ABI\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const transaction = prepareContractCall({\n      contract,\n      method: \"function emergencyWithdraw()\",\n      params: [],\n    });\n\n    const result = await this.executeTransaction(transaction);\n    return (result as any).success;\n  }\n\n  // ============ Advanced Stats and Queries ============\n\n  /**\n   * Get statistics for ApeChain (total USDC and amount from chain)\n   * @param chainId Chain ID (typically ApeChain)\n   * @returns Object with total USDC and total from chain\n   */\n  async getApeChainStats(chainId: number): Promise<{ totalUsdc: string; totalFromChain: string }> {\n    const contractAddress = this.getContractAddress(chainId);\n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported or contract not deployed`);\n    }\n\n    const chain = this.getChainById(chainId);\n    // @ts-ignore: Suppress type mismatch for ABI\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const result = await this.readContract(contract, \"getApeChainStats\", []) as [bigint, bigint];\n    return {\n      totalUsdc: result[0].toString(),\n      totalFromChain: result[1].toString()\n    };\n  }\n\n  /**\n   * Get all active creators with pagination\n   * @param offset Starting index for pagination\n   * @param limit Number of creators to return\n   * @param chainId Chain ID\n   * @returns Object with creator IDs, wallets, tip amounts, and total active count\n   */\n  async getAllActiveCreators(offset: number, limit: number, chainId: number): Promise<{\n    creatorIds: number[];\n    wallets: string[];\n    tipAmounts: string[];\n    totalActive: number;\n  }> {\n    const contractAddress = this.getContractAddress(chainId);\n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported or contract not deployed`);\n    }\n\n    const chain = this.getChainById(chainId);\n    // @ts-ignore: Suppress type mismatch for ABI\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const result = await this.readContract(contract, \"getAllActiveCreators\", [BigInt(offset), BigInt(limit)]) as [bigint[], string[], bigint[], bigint];\n    return {\n      creatorIds: result[0].map(id => Number(id)),\n      wallets: result[1],\n      tipAmounts: result[2].map(amount => amount.toString()),\n      totalActive: Number(result[3])\n    };\n  }\n\n  /**\n   * Get information for multiple creators by their IDs\n   * @param creatorIds Array of creator IDs\n   * @param chainId Chain ID\n   * @returns Object with tip amounts, wallets, and active status for each creator\n   */\n  async getCreatorsByIds(creatorIds: number[], chainId: number): Promise<{\n    tipAmounts: string[];\n    wallets: string[];\n    activeStatus: boolean[];\n  }> {\n    const contractAddress = this.getContractAddress(chainId);\n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported or contract not deployed`);\n    }\n\n    const chain = this.getChainById(chainId);\n    // @ts-ignore: Suppress type mismatch for ABI\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const bigIntIds = creatorIds.map(id => BigInt(id));\n    const result = await this.readContract(contract, \"getCreatorsByIds\", [bigIntIds]) as [bigint[], string[], boolean[]];\n    return {\n      tipAmounts: result[0].map(amount => amount.toString()),\n      wallets: result[1],\n      activeStatus: result[2]\n    };\n  }\n\n  // ============ Relay Management ============\n\n  /**\n   * Manually relay pending ETH to ApeChain\n   * @param chainId Source chain ID\n   * @returns True if successful\n   */\n  async manualRelayETH(chainId: number): Promise<boolean> {\n    const contractAddress = this.getContractAddress(chainId);\n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported or contract not deployed`);\n    }\n\n    const chain = this.getChainById(chainId);\n    // @ts-ignore: Suppress type mismatch for ABI\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const transaction = prepareContractCall({\n      contract,\n      method: \"function manualRelayETH()\",\n      params: [],\n    });\n\n    const result = await this.executeTransaction(transaction);\n    return (result as any).success;\n  }\n\n  /**\n   * Manually relay pending token to ApeChain\n   * @param token Token address\n   * @param chainId Source chain ID\n   * @returns True if successful\n   */\n  async manualRelayToken(token: string, chainId: number): Promise<boolean> {\n    const contractAddress = this.getContractAddress(chainId);\n    if (!contractAddress) {\n      throw new Error(`Chain ${chainId} not supported or contract not deployed`);\n    }\n\n    const chain = this.getChainById(chainId);\n    // @ts-ignore: Suppress type mismatch for ABI\n    const contract = getContract({\n      client: this.client,\n      chain,\n      address: contractAddress,\n      abi: TypedABI,\n    });\n\n    const transaction = prepareContractCall({\n      contract,\n      method: \"function manualRelayToken(address token)\",\n      params: [token],\n    });\n\n    const result = await this.executeTransaction(transaction);\n    return (result as any).success;\n  }\n\n  // ===== TOKEN BALANCE AND APPROVAL METHODS =====\n\n  /**\n   * Get native token balance for a wallet\n   * @param walletAddress Wallet address to check\n   * @param chainId Chain ID\n   * @returns Balance in wei as string\n   */\n  async getNativeBalance(walletAddress: string, chainId: number): Promise<string> {\n    const chain = this.getChainById(chainId);\n    \n    try {\n      // Use thirdweb's built-in balance checking\n      const { getRpcClient } = await import('thirdweb/rpc');\n      const rpcRequest = getRpcClient({ client: this.client, chain });\n      \n      // Make eth_getBalance RPC call\n      const balance = await rpcRequest({\n        method: 'eth_getBalance',\n        params: [walletAddress, 'latest']\n      });\n      \n      // Convert hex balance to decimal string\n      return BigInt(balance as string).toString();\n    } catch (error) {\n      console.error(`Failed to get native balance for ${walletAddress} on chain ${chainId}:`, error);\n      return '0';\n    }\n  }\n\n  /**\n   * Get ERC20 token balance for a wallet\n   * @param walletAddress Wallet address to check\n   * @param tokenAddress Token contract address\n   * @param chainId Chain ID\n   * @returns Balance in token units as string\n   */\n  async getTokenBalance(walletAddress: string, tokenAddress: string, chainId: number): Promise<string> {\n    if (tokenAddress === 'native') {\n      return this.getNativeBalance(walletAddress, chainId);\n    }\n\n    const chain = this.getChainById(chainId);\n    \n    try {\n      const tokenContract = getContract({\n        client: this.client,\n        chain,\n        address: tokenAddress,\n        abi: TypedABI,\n      });\n\n      const balance = await readContract({\n        contract: tokenContract,\n        method: 'function balanceOf(address) view returns (uint256)',\n        params: [walletAddress],\n      });\n\n      return (balance as bigint).toString();\n    } catch (error) {\n      console.error(`Failed to get token balance for ${walletAddress} on chain ${chainId}:`, error);\n      return '0';\n    }\n  }\n\n  /**\n   * Get balances for multiple tokens\n   * @param walletAddress Wallet address to check\n   * @param tokenAddresses Array of token addresses ('native' for native token)\n   * @param chainId Chain ID\n   * @returns Object mapping token addresses to balance strings\n   */\n  async getMultipleTokenBalances(\n    walletAddress: string, \n    tokenAddresses: string[], \n    chainId: number\n  ): Promise<Record<string, string>> {\n    const balances: Record<string, string> = {};\n\n    // Fetch all balances in parallel for better performance\n    const balancePromises = tokenAddresses.map(async (tokenAddress) => {\n      const balance = await this.getTokenBalance(walletAddress, tokenAddress, chainId);\n      return { tokenAddress, balance };\n    });\n\n    const results = await Promise.allSettled(balancePromises);\n    \n    results.forEach((result, index) => {\n      const tokenAddress = tokenAddresses[index];\n      if (result.status === 'fulfilled') {\n        balances[tokenAddress] = result.value.balance;\n      } else {\n        console.warn(`Failed to get balance for token ${tokenAddress}:`, result.reason);\n        balances[tokenAddress] = '0';\n      }\n    });\n\n    return balances;\n  }\n\n  /**\n   * Check ERC20 token allowance\n   * @param tokenAddress Token contract address\n   * @param ownerAddress Owner wallet address\n   * @param spenderAddress Spender contract address\n   * @param chainId Chain ID\n   * @returns Allowance amount as string\n   */\n  async checkAllowance(\n    tokenAddress: string, \n    ownerAddress: string, \n    spenderAddress: string, \n    chainId: number\n  ): Promise<string> {\n    if (tokenAddress === 'native') {\n      return '0'; // Native tokens don't need approval\n    }\n\n    const chain = this.getChainById(chainId);\n    \n    try {\n      const tokenContract = getContract({\n        client: this.client,\n        chain,\n        address: tokenAddress,\n      });\n\n      const allowance = await readContract({\n        contract: tokenContract,\n        method: 'function allowance(address owner, address spender) view returns (uint256)',\n        params: [ownerAddress, spenderAddress],\n      });\n\n      return (allowance as bigint).toString();\n    } catch (error) {\n      console.error(`Failed to check allowance for ${tokenAddress}:`, error);\n      return '0';\n    }\n  }\n\n  /**\n   * Check if token needs approval for spending\n   * @param tokenAddress Token contract address\n   * @param ownerAddress Owner wallet address\n   * @param spenderAddress Spender contract address\n   * @param amount Amount to spend\n   * @param chainId Chain ID\n   * @returns True if approval is needed\n   */\n  async needsApproval(\n    tokenAddress: string,\n    ownerAddress: string,\n    spenderAddress: string,\n    amount: string,\n    chainId: number\n  ): Promise<boolean> {\n    if (tokenAddress === 'native') {\n      return false; // Native tokens don't need approval\n    }\n\n    const allowance = await this.checkAllowance(tokenAddress, ownerAddress, spenderAddress, chainId);\n    return BigInt(allowance) < BigInt(amount);\n  }\n\n  /**\n   * Get token information (name, symbol, decimals)\n   * @param tokenAddress Token contract address\n   * @param chainId Chain ID\n   * @returns Token info object\n   */\n  async getTokenInfo(tokenAddress: string, chainId: number): Promise<{\n    name: string;\n    symbol: string;\n    decimals: number;\n  }> {\n    if (tokenAddress === 'native') {\n      const chain = this.getChainById(chainId);\n      return {\n        name: chain.nativeCurrency?.name || 'Ether',\n        symbol: chain.nativeCurrency?.symbol || 'ETH',\n        decimals: chain.nativeCurrency?.decimals || 18,\n      };\n    }\n\n    const chain = this.getChainById(chainId);\n    \n    try {\n      const tokenContract = getContract({\n        client: this.client,\n        chain,\n        address: tokenAddress,\n      });\n\n      const [name, symbol, decimals] = await Promise.all([\n        readContract({\n          contract: tokenContract,\n          method: 'function name() view returns (string)',\n          params: [],\n        }).catch(() => 'Unknown'),\n        readContract({\n          contract: tokenContract,\n          method: 'function symbol() view returns (string)',\n          params: [],\n        }).catch(() => 'UNK'),\n        readContract({\n          contract: tokenContract,\n          method: 'function decimals() view returns (uint8)',\n          params: [],\n        }).catch(() => 18),\n      ]);\n\n      return {\n        name: name as string,\n        symbol: symbol as string,\n        decimals: Number(decimals),\n      };\n    } catch (error) {\n      console.error(`Failed to get token info for ${tokenAddress}:`, error);\n      return {\n        name: 'Unknown',\n        symbol: 'UNK',\n        decimals: 18,\n      };\n    }\n  }\n\n  /**\n   * Approve token spending for a spender contract\n   * @param tokenAddress Token contract address\n   * @param spenderAddress Spender contract address (e.g., TippingChain contract)\n   * @param amount Amount to approve (in token units, not wei)\n   * @param chainId Chain ID\n   * @returns Approval transaction result\n   */\n  async approveToken(\n    tokenAddress: string,\n    spenderAddress: string,\n    amount: string,\n    chainId: number\n  ): Promise<{\n    success: boolean;\n    transactionHash?: string;\n    error?: string;\n  }> {\n    if (tokenAddress === 'native') {\n      return {\n        success: true,\n        // Native tokens don't need approval\n      };\n    }\n\n    const chain = this.getChainById(chainId);\n    \n    try {\n      const tokenContract = getContract({\n        client: this.client,\n        chain,\n        address: tokenAddress,\n      });\n\n      // Prepare approval transaction\n      const approveTx = prepareContractCall({\n        contract: tokenContract,\n        method: 'function approve(address spender, uint256 amount) returns (bool)',\n        params: [spenderAddress, BigInt(amount)],\n      });\n\n      // Execute the approval transaction\n      const result = await this.executeTransaction(approveTx);\n      \n      return {\n        success: true,\n        transactionHash: (result as any).transactionHash,\n      };\n    } catch (error) {\n      console.error(`Failed to approve token ${tokenAddress}:`, error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  /**\n   * Approve unlimited token spending for a spender contract (max approval)\n   * @param tokenAddress Token contract address\n   * @param spenderAddress Spender contract address\n   * @param chainId Chain ID\n   * @returns Approval transaction result\n   */\n  async approveTokenMax(\n    tokenAddress: string,\n    spenderAddress: string,\n    chainId: number\n  ): Promise<{\n    success: boolean;\n    transactionHash?: string;\n    error?: string;\n  }> {\n    // Use max uint256 value for unlimited approval\n    const MAX_UINT256 = '115792089237316195423570985008687907853269984665640564039457584007913129639935';\n    \n    return this.approveToken(tokenAddress, spenderAddress, MAX_UINT256, chainId);\n  }\n}\n","// Main SDK exports\nexport { ApeChainTippingSDK } from './core/ApeChainTippingSDK';\nexport { ApeChainRelayService } from './services/ApeChainRelayService';\n\n// Real-time service exports\nexport { \n  TransactionStatusService,\n  type TransactionStatus,\n  type TransactionReceipt,\n  type TransactionStatusUpdate,\n  type WatchTransactionOptions\n} from './services/TransactionStatusService';\n\nexport { \n  BalanceWatcherService,\n  type BalanceUpdate,\n  type ChainBalanceMap,\n  type BalanceWatchOptions\n} from './services/BalanceWatcherService';\n\nexport { \n  RelayStatusService,\n  type RelayStatus,\n  type RelayUpdate,\n  type RelayWatchOptions\n} from './services/RelayStatusService';\n\n// Type exports\nexport type {\n  ApeChainTippingConfig,\n  TipParams,\n  TipResult,\n  Creator,\n  CreatorRegistration,\n  PlatformStats,\n} from './core/ApeChainTippingSDK';\n\nexport type {\n  RelayQuote,\n  RelayResult,\n} from './services/ApeChainRelayService';\n\nexport type {\n  ViewerReward,\n  ViewerRewardParams,\n  BatchViewerRewardParams,\n  ViewerRewardStats,\n  ViewerRewardsPlatformStats,\n  ViewerRewardResult,\n  ViewerInfo,\n  ViewerRegistration,\n  RewardPoolParams,\n  RewardPoolResult,\n  RewardPoolCalculation,\n} from './types/viewer-rewards';\n\nexport type {\n  TokenInfo,\n  TokenBalance,\n  ApprovalStatus,\n  ApprovalResult,\n  MultiTokenBalanceResponse,\n} from './types/token-balance';\n\n// Re-export from contracts-interface\nexport { \n  MembershipTier,\n  SUPPORTED_CHAINS,\n  SUPPORTED_TESTNETS,\n  NETWORK_CONFIGS,\n  CONTRACT_CONSTANTS,\n  TIER_CREATOR_SHARES,\n  RELAY_RECEIVER_ADDRESSES,\n  getContractAddress,\n  getAllContractAddresses,\n  isContractDeployed,\n  getRelayReceiverAddress\n} from '@tippingchain/contracts-interface';\n\nexport const DEFAULT_CONFIG = {\n  environment: 'production' as const,\n  endpoints: {\n    relayApi: 'https://api.relay.link',\n  },\n} as const;"]}